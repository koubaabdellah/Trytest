var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define(["require", "exports", "esri/core/Collection", "esri/layers/support/FeatureFilter", "esri/Graphic", "esri/layers/support/FeatureEffect"], function (require, exports, Collection_1, FeatureFilter_1, Graphic_1, FeatureEffect_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSymbol = exports.clearLookupLayers = exports.hideLookuplayers = exports.createGoToProps = exports.getSearchGeometry = exports.getLookupLayers = void 0;
    Collection_1 = __importDefault(Collection_1);
    FeatureFilter_1 = __importDefault(FeatureFilter_1);
    Graphic_1 = __importDefault(Graphic_1);
    FeatureEffect_1 = __importDefault(FeatureEffect_1);
    function getLookupLayers(props) {
        return __awaiter(this, void 0, void 0, function () {
            var view, hideFeaturesOnLoad, lookupLayers, hasLookupLayers, searchableLayers, returnLayers;
            return __generator(this, function (_a) {
                view = props.view, hideFeaturesOnLoad = props.hideFeaturesOnLoad, lookupLayers = props.lookupLayers;
                hasLookupLayers = lookupLayers && (lookupLayers === null || lookupLayers === void 0 ? void 0 : lookupLayers.length) > 0 ? true : false;
                searchableLayers = !hasLookupLayers ? view.map.layers : new Collection_1.default();
                returnLayers = [];
                // Get all the map layers
                if (hasLookupLayers) {
                    // get any predefined layers otherwise we'll use all map layers
                    lookupLayers.forEach(function (layerItem) {
                        if (layerItem.id) {
                            if (layerItem.type === 'DynamicLayer') {
                                var sublayerId = layerItem.id.lastIndexOf('.');
                                if (sublayerId !== -1) {
                                    var id = layerItem.id.slice(0, sublayerId);
                                    var layer = view.map.findLayerById(id);
                                    if (layer && searchableLayers.indexOf(layer) === -1) {
                                        searchableLayers.add(layer);
                                    }
                                }
                            }
                            else {
                                // feature layer
                                var layer = view.map.findLayerById(layerItem.id);
                                if (!layer) {
                                    //maybe its a feature collection
                                    var sublayerId = layerItem.id.lastIndexOf('_');
                                    if (sublayerId !== -1) {
                                        var id = layerItem.id.slice(0, sublayerId);
                                        layer = view.map.findLayerById(id);
                                    }
                                }
                                layer && searchableLayers.add(_configureFeatureLayer(layer));
                            }
                        }
                    });
                }
                // Include the search layer in the lookup layers if specified
                searchableLayers.forEach(function (layer) {
                    if (layer && layer.type) {
                        if (layer.type === 'feature') {
                            returnLayers.push(_configureFeatureLayer(layer));
                        }
                        else if (layer.type === "group") {
                            var flattendGroup = _getLayersFromGroupLayer(layer);
                            if ((flattendGroup === null || flattendGroup === void 0 ? void 0 : flattendGroup.length) > 0) {
                                flattendGroup.forEach(function (b) {
                                    if ((b === null || b === void 0 ? void 0 : b.type) === "imagery" || (b === null || b === void 0 ? void 0 : b.type) === "tile")
                                        return;
                                    searchableLayers.add(b);
                                });
                            }
                        }
                        else if (layer.type === 'map-image') {
                            // if sub layers have been enabled during config
                            // only add those. Otherwise add all dynamic sub layers
                            var mapLayer = layer;
                            var checkSubLayer_1 = lookupLayers && lookupLayers.length && lookupLayers.length > 0 ? true : false;
                            mapLayer.sublayers &&
                                mapLayer.sublayers.forEach(function (sublayer) {
                                    if (checkSubLayer_1) {
                                        var configId_1 = "".concat(sublayer.layer.id, ".").concat(sublayer.id);
                                        lookupLayers.forEach(function (l) {
                                            if (l.id && l.id === configId_1) {
                                                sublayer.createFeatureLayer().then(function (l) {
                                                    view.map.add(l);
                                                    returnLayers.push(l);
                                                });
                                                sublayer.visible = false;
                                            }
                                        });
                                    }
                                    else {
                                        sublayer.createFeatureLayer().then(function (l) {
                                            view.map.add(l);
                                            returnLayers.push(l);
                                        });
                                        sublayer.visible = false;
                                    }
                                });
                        }
                    }
                });
                if (hideFeaturesOnLoad)
                    hideLookuplayers(returnLayers, props.view);
                return [2 /*return*/, Promise.resolve(returnLayers)];
            });
        });
    }
    exports.getLookupLayers = getLookupLayers;
    function getSearchGeometry(props) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var results, graphic, returnGraphic;
            return __generator(this, function (_e) {
                results = props.results;
                graphic = _getResultGeometries(results);
                returnGraphic = graphic;
                if (((_a = graphic === null || graphic === void 0 ? void 0 : graphic.geometry) === null || _a === void 0 ? void 0 : _a.type) === "polyline" || ((_b = graphic === null || graphic === void 0 ? void 0 : graphic.geometry) === null || _b === void 0 ? void 0 : _b.type) === 'polygon') {
                    returnGraphic = new Graphic_1.default({ geometry: (_d = (_c = graphic === null || graphic === void 0 ? void 0 : graphic.geometry) === null || _c === void 0 ? void 0 : _c.extent) === null || _d === void 0 ? void 0 : _d.center, attributes: graphic === null || graphic === void 0 ? void 0 : graphic.attributes });
                }
                return [2 /*return*/, Promise.resolve(returnGraphic)];
            });
        });
    }
    exports.getSearchGeometry = getSearchGeometry;
    function createGoToProps(target, config) {
        var searchScale = config.searchScale, enableSearchScale = config.enableSearchScale, enableBufferSearch = config.enableBufferSearch, level = config.level;
        var goToProps = {
            target: target
        };
        if (level) {
            goToProps.zoom = level;
        }
        else if (searchScale && enableSearchScale && enableBufferSearch) {
            goToProps.scale = searchScale;
        }
        return goToProps;
    }
    exports.createGoToProps = createGoToProps;
    function _getResultGeometries(results) {
        var feature = null;
        results.results.some(function (searchResults) {
            return searchResults.results.some(function (r) {
                if (r.feature) {
                    feature = r.feature;
                    if (r.name && feature.attributes) {
                        feature.attributes.name = r.name;
                    }
                    return true;
                }
                else {
                    return false;
                }
            });
        });
        return feature;
    }
    function _configureFeatureLayer(layer) {
        var flayer = layer;
        if (flayer.popupEnabled) {
            flayer.outFields = ["*"];
        }
        return flayer;
    }
    function _getLayersFromGroupLayer(group) {
        var _this = this;
        var layers = [];
        group.layers.filter(function (layer) {
            if (layer.group) {
                var innerGroup = _this._getLayersFromGroupLayer(layer.group);
                layers = __spreadArray(__spreadArray([], layers, true), [innerGroup], false);
            }
            else {
                layers.push(layer);
            }
        });
        return layers;
    }
    function hideLookuplayers(layers, view) {
        var noMap = document.body.classList.contains('no-map');
        if (noMap) {
            return;
        }
        layers.forEach(function (layer) {
            view.whenLayerView(layer).then(function (layerView) {
                //hide layers
                layerView.filter = null;
                layerView.featureEffect = new FeatureEffect_1.default({
                    excludedEffect: "opacity(0%)",
                    filter: new FeatureFilter_1.default({ where: '1=0' })
                });
            });
        });
    }
    exports.hideLookuplayers = hideLookuplayers;
    function clearLookupLayers(layers, presetEffects, view) {
        layers === null || layers === void 0 ? void 0 : layers.forEach(function (layer) {
            view.whenLayerView(layer).then(function (layerView) {
                // clear everything 
                layerView.filter = null;
                layerView.featureEffect = new FeatureEffect_1.default({
                    excludedEffect: null,
                    filter: null
                });
                // reapply effects if they exist 
                if ((presetEffects === null || presetEffects === void 0 ? void 0 : presetEffects.length) > 0) {
                    presetEffects === null || presetEffects === void 0 ? void 0 : presetEffects.forEach(function (pe) {
                        var _a;
                        var effect = pe.effect, layerView = pe.layerView;
                        if ((effect === null || effect === void 0 ? void 0 : effect.includedEffect) || (effect === null || effect === void 0 ? void 0 : effect.excludedEffect) && (((_a = layerView === null || layerView === void 0 ? void 0 : layerView.layer) === null || _a === void 0 ? void 0 : _a.id) === (layer === null || layer === void 0 ? void 0 : layer.id))) {
                            layerView.featureEffect = effect;
                        }
                    });
                }
            });
        });
    }
    exports.clearLookupLayers = clearLookupLayers;
    function getSymbol(config, color) {
        var mapPinSize = config.mapPinSize, mapPinIcon = config.mapPinIcon;
        var marker = null;
        switch (mapPinIcon) {
            case "pushpin":
                marker = {
                    "type": "CIMPointSymbol",
                    "symbolLayers": [{
                            "type": "CIMVectorMarker",
                            "enable": true,
                            "anchorPoint": { "x": 0, "y": -0.5 },
                            "anchorPointUnits": "Relative",
                            "dominantSizeAxis3D": "Y",
                            "size": mapPinSize,
                            "billboardMode3D": "FaceNearPlane",
                            "frame": {
                                "xmin": 0,
                                "ymin": 0,
                                "xmax": 21,
                                "ymax": 21
                            },
                            "markerGraphics": [
                                {
                                    "type": "CIMMarkerGraphic",
                                    "geometry": {
                                        "rings": [
                                            [
                                                [
                                                    15.09,
                                                    21
                                                ],
                                                [
                                                    15.09,
                                                    19.69
                                                ],
                                                [
                                                    13.78,
                                                    18.37
                                                ],
                                                [
                                                    13.78,
                                                    10.5
                                                ],
                                                [
                                                    15.09,
                                                    9.19
                                                ],
                                                [
                                                    15.09,
                                                    7.88
                                                ],
                                                [
                                                    11.16,
                                                    7.88
                                                ],
                                                [
                                                    11.16,
                                                    1.31
                                                ],
                                                [
                                                    10.5,
                                                    0
                                                ],
                                                [
                                                    9.84,
                                                    1.31
                                                ],
                                                [
                                                    9.84,
                                                    7.88
                                                ],
                                                [
                                                    5.91,
                                                    7.88
                                                ],
                                                [
                                                    5.91,
                                                    9.19
                                                ],
                                                [
                                                    7.22,
                                                    10.5
                                                ],
                                                [
                                                    7.22,
                                                    18.38
                                                ],
                                                [
                                                    5.91,
                                                    19.69
                                                ],
                                                [
                                                    5.91,
                                                    21
                                                ],
                                                [
                                                    15.09,
                                                    21
                                                ]
                                            ]
                                        ]
                                    },
                                    "symbol": {
                                        "type": "CIMPolygonSymbol",
                                        "symbolLayers": [
                                            {
                                                "type": "CIMSolidStroke",
                                                "enable": true,
                                                "capStyle": "Round",
                                                "joinStyle": "Round",
                                                "lineStyle3D": "Strip",
                                                "miterLimit": 10,
                                                "width": 0,
                                                "color": [110, 110, 110, 255]
                                            },
                                            {
                                                "type": "CIMSolidFill",
                                                "enable": true,
                                                "color": color.toJSON()
                                            }
                                        ]
                                    }
                                }
                            ],
                            "scaleSymbolsProportionally": true,
                            "respectFrame": true
                        }
                    ]
                };
                break;
            case "location":
                marker = {
                    "type": "CIMPointSymbol",
                    "symbolLayers": [
                        {
                            "type": "CIMVectorMarker",
                            "enable": true,
                            "anchorPoint": {
                                "x": 0,
                                "y": -0.5
                            },
                            "anchorPointUnits": "Relative",
                            "dominantSizeAxis3D": "Y",
                            "size": mapPinSize,
                            "billboardMode3D": "FaceNearPlane",
                            "frame": {
                                "xmin": 0,
                                "ymin": 0,
                                "xmax": 21,
                                "ymax": 21
                            },
                            "markerGraphics": [
                                {
                                    "type": "CIMMarkerGraphic",
                                    "geometry": {
                                        "rings": [
                                            [
                                                [
                                                    16.06,
                                                    5.58
                                                ],
                                                [
                                                    10.5,
                                                    0
                                                ],
                                                [
                                                    4.94,
                                                    5.58
                                                ],
                                                [
                                                    4.94,
                                                    16.73
                                                ],
                                                [
                                                    5.03,
                                                    17.69
                                                ],
                                                [
                                                    5.3,
                                                    18.54
                                                ],
                                                [
                                                    5.75,
                                                    19.27
                                                ],
                                                [
                                                    6.37,
                                                    19.88
                                                ],
                                                [
                                                    7.17,
                                                    20.37
                                                ],
                                                [
                                                    8.14,
                                                    20.72
                                                ],
                                                [
                                                    9.25,
                                                    20.93
                                                ],
                                                [
                                                    10.5,
                                                    21
                                                ],
                                                [
                                                    11.75,
                                                    20.93
                                                ],
                                                [
                                                    12.86,
                                                    20.72
                                                ],
                                                [
                                                    13.83,
                                                    20.37
                                                ],
                                                [
                                                    14.63,
                                                    19.88
                                                ],
                                                [
                                                    15.25,
                                                    19.27
                                                ],
                                                [
                                                    15.7,
                                                    18.54
                                                ],
                                                [
                                                    15.97,
                                                    17.69
                                                ],
                                                [
                                                    16.06,
                                                    16.73
                                                ],
                                                [
                                                    16.06,
                                                    5.58
                                                ]
                                            ]
                                        ]
                                    },
                                    "symbol": {
                                        "type": "CIMPolygonSymbol",
                                        "symbolLayers": [
                                            {
                                                "type": "CIMSolidStroke",
                                                "enable": true,
                                                "capStyle": "Round",
                                                "joinStyle": "Round",
                                                "lineStyle3D": "Strip",
                                                "miterLimit": 10,
                                                "width": 0,
                                                "color": [
                                                    110,
                                                    110,
                                                    110,
                                                    255
                                                ]
                                            },
                                            {
                                                "type": "CIMSolidFill",
                                                "enable": true,
                                                "color": color.toJSON()
                                            }
                                        ]
                                    }
                                }
                            ],
                            "scaleSymbolsProportionally": true,
                            "respectFrame": true
                        }
                    ]
                };
                break;
            case "square":
                marker = {
                    "type": "CIMPointSymbol",
                    "symbolLayers": [
                        {
                            "type": "CIMVectorMarker",
                            "enable": true,
                            "anchorPoint": {
                                "x": 0,
                                "y": -0.5
                            },
                            "anchorPointUnits": "Relative",
                            "dominantSizeAxis3D": "Y",
                            "size": mapPinSize,
                            "billboardMode3D": "FaceNearPlane",
                            "frame": {
                                "xmin": 0,
                                "ymin": 0,
                                "xmax": 21,
                                "ymax": 21
                            },
                            "markerGraphics": [
                                {
                                    "type": "CIMMarkerGraphic",
                                    "geometry": {
                                        "rings": [
                                            [
                                                [
                                                    15.09,
                                                    21
                                                ],
                                                [
                                                    16.09,
                                                    20.8
                                                ],
                                                [
                                                    16.95,
                                                    20.23
                                                ],
                                                [
                                                    17.52,
                                                    19.38
                                                ],
                                                [
                                                    17.72,
                                                    18.38
                                                ],
                                                [
                                                    17.72,
                                                    9.19
                                                ],
                                                [
                                                    17.52,
                                                    8.19
                                                ],
                                                [
                                                    16.95,
                                                    7.33
                                                ],
                                                [
                                                    16.09,
                                                    6.76
                                                ],
                                                [
                                                    15.09,
                                                    6.56
                                                ],
                                                [
                                                    13.78,
                                                    6.56
                                                ],
                                                [
                                                    10.5,
                                                    0
                                                ],
                                                [
                                                    7.22,
                                                    6.56
                                                ],
                                                [
                                                    5.91,
                                                    6.56
                                                ],
                                                [
                                                    4.91,
                                                    6.76
                                                ],
                                                [
                                                    4.05,
                                                    7.33
                                                ],
                                                [
                                                    3.48,
                                                    8.19
                                                ],
                                                [
                                                    3.28,
                                                    9.19
                                                ],
                                                [
                                                    3.28,
                                                    18.38
                                                ],
                                                [
                                                    3.48,
                                                    19.38
                                                ],
                                                [
                                                    4.05,
                                                    20.23
                                                ],
                                                [
                                                    4.91,
                                                    20.8
                                                ],
                                                [
                                                    5.91,
                                                    21
                                                ],
                                                [
                                                    15.09,
                                                    21
                                                ]
                                            ]
                                        ]
                                    },
                                    "symbol": {
                                        "type": "CIMPolygonSymbol",
                                        "symbolLayers": [
                                            {
                                                "type": "CIMSolidStroke",
                                                "enable": true,
                                                "capStyle": "Round",
                                                "joinStyle": "Round",
                                                "lineStyle3D": "Strip",
                                                "miterLimit": 10,
                                                "width": 0,
                                                "color": [
                                                    110,
                                                    110,
                                                    110,
                                                    255
                                                ]
                                            },
                                            {
                                                "type": "CIMSolidFill",
                                                "enable": true,
                                                "color": color.toJSON()
                                            }
                                        ]
                                    }
                                }
                            ],
                            "scaleSymbolsProportionally": true,
                            "respectFrame": true
                        }
                    ]
                };
                break;
            case "teardrop":
                marker = {
                    "type": "CIMPointSymbol",
                    "symbolLayers": [
                        {
                            "type": "CIMVectorMarker",
                            "enable": true,
                            "anchorPoint": {
                                "x": 0,
                                "y": -0.5
                            },
                            "anchorPointUnits": "Relative",
                            "dominantSizeAxis3D": "Y",
                            "size": mapPinSize,
                            "billboardMode3D": "FaceNearPlane",
                            "frame": {
                                "xmin": 0,
                                "ymin": 0,
                                "xmax": 21,
                                "ymax": 21
                            },
                            "markerGraphics": [
                                {
                                    "type": "CIMMarkerGraphic",
                                    "geometry": {
                                        "rings": [
                                            [
                                                [
                                                    17.17,
                                                    14.33
                                                ],
                                                [
                                                    16.97,
                                                    12.96
                                                ],
                                                [
                                                    16.38,
                                                    11.37
                                                ],
                                                [
                                                    12.16,
                                                    3.98
                                                ],
                                                [
                                                    11.2,
                                                    1.94
                                                ],
                                                [
                                                    10.5,
                                                    0
                                                ],
                                                [
                                                    9.8,
                                                    1.96
                                                ],
                                                [
                                                    8.84,
                                                    4.02
                                                ],
                                                [
                                                    4.61,
                                                    11.41
                                                ],
                                                [
                                                    4.02,
                                                    12.98
                                                ],
                                                [
                                                    3.83,
                                                    14.33
                                                ],
                                                [
                                                    3.96,
                                                    15.63
                                                ],
                                                [
                                                    4.34,
                                                    16.88
                                                ],
                                                [
                                                    4.95,
                                                    18.03
                                                ],
                                                [
                                                    5.78,
                                                    19.04
                                                ],
                                                [
                                                    6.8,
                                                    19.88
                                                ],
                                                [
                                                    7.95,
                                                    20.49
                                                ],
                                                [
                                                    9.2,
                                                    20.87
                                                ],
                                                [
                                                    10.5,
                                                    21
                                                ],
                                                [
                                                    11.8,
                                                    20.87
                                                ],
                                                [
                                                    13.05,
                                                    20.5
                                                ],
                                                [
                                                    14.2,
                                                    19.88
                                                ],
                                                [
                                                    15.22,
                                                    19.05
                                                ],
                                                [
                                                    16.05,
                                                    18.03
                                                ],
                                                [
                                                    16.66,
                                                    16.88
                                                ],
                                                [
                                                    17.04,
                                                    15.63
                                                ],
                                                [
                                                    17.17,
                                                    14.33
                                                ]
                                            ]
                                        ]
                                    },
                                    "symbol": {
                                        "type": "CIMPolygonSymbol",
                                        "symbolLayers": [
                                            {
                                                "type": "CIMSolidStroke",
                                                "enable": true,
                                                "capStyle": "Round",
                                                "joinStyle": "Round",
                                                "lineStyle3D": "Strip",
                                                "miterLimit": 10,
                                                "width": 0,
                                                "color": [
                                                    110,
                                                    110,
                                                    110,
                                                    255
                                                ]
                                            },
                                            {
                                                "type": "CIMSolidFill",
                                                "enable": true,
                                                "color": color.toJSON()
                                            }
                                        ]
                                    }
                                }
                            ],
                            "scaleSymbolsProportionally": true,
                            "respectFrame": true
                        }
                    ]
                };
                break;
            case "pin":
                marker = {
                    "type": "CIMPointSymbol",
                    "symbolLayers": [
                        {
                            "type": "CIMVectorMarker",
                            "enable": true,
                            "anchorPoint": {
                                "x": 0,
                                "y": -0.5
                            },
                            "anchorPointUnits": "Relative",
                            "dominantSizeAxis3D": "Y",
                            "size": mapPinSize,
                            "billboardMode3D": "FaceNearPlane",
                            "frame": {
                                "xmin": 0,
                                "ymin": 0,
                                "xmax": 21,
                                "ymax": 21
                            },
                            "markerGraphics": [
                                {
                                    "type": "CIMMarkerGraphic",
                                    "geometry": {
                                        "rings": [
                                            [
                                                [
                                                    15.2,
                                                    16.3
                                                ],
                                                [
                                                    15.13,
                                                    15.47
                                                ],
                                                [
                                                    14.9,
                                                    14.66
                                                ],
                                                [
                                                    14.54,
                                                    13.91
                                                ],
                                                [
                                                    14.05,
                                                    13.24
                                                ],
                                                [
                                                    13.44,
                                                    12.65
                                                ],
                                                [
                                                    12.74,
                                                    12.19
                                                ],
                                                [
                                                    11.97,
                                                    11.86
                                                ],
                                                [
                                                    11.15,
                                                    11.67
                                                ],
                                                [
                                                    11.15,
                                                    1.3
                                                ],
                                                [
                                                    10.5,
                                                    0
                                                ],
                                                [
                                                    9.85,
                                                    1.3
                                                ],
                                                [
                                                    9.85,
                                                    11.67
                                                ],
                                                [
                                                    9.03,
                                                    11.86
                                                ],
                                                [
                                                    8.26,
                                                    12.19
                                                ],
                                                [
                                                    7.56,
                                                    12.65
                                                ],
                                                [
                                                    6.95,
                                                    13.24
                                                ],
                                                [
                                                    6.46,
                                                    13.91
                                                ],
                                                [
                                                    6.1,
                                                    14.66
                                                ],
                                                [
                                                    5.87,
                                                    15.47
                                                ],
                                                [
                                                    5.8,
                                                    16.3
                                                ],
                                                [
                                                    5.89,
                                                    17.22
                                                ],
                                                [
                                                    6.16,
                                                    18.1
                                                ],
                                                [
                                                    6.59,
                                                    18.91
                                                ],
                                                [
                                                    7.18,
                                                    19.63
                                                ],
                                                [
                                                    7.89,
                                                    20.21
                                                ],
                                                [
                                                    8.7,
                                                    20.64
                                                ],
                                                [
                                                    9.58,
                                                    20.91
                                                ],
                                                [
                                                    10.5,
                                                    21
                                                ],
                                                [
                                                    11.42,
                                                    20.91
                                                ],
                                                [
                                                    12.3,
                                                    20.64
                                                ],
                                                [
                                                    13.11,
                                                    20.21
                                                ],
                                                [
                                                    13.82,
                                                    19.62
                                                ],
                                                [
                                                    14.41,
                                                    18.91
                                                ],
                                                [
                                                    14.84,
                                                    18.1
                                                ],
                                                [
                                                    15.11,
                                                    17.22
                                                ],
                                                [
                                                    15.2,
                                                    16.3
                                                ]
                                            ]
                                        ]
                                    },
                                    "symbol": {
                                        "type": "CIMPolygonSymbol",
                                        "symbolLayers": [
                                            {
                                                "type": "CIMSolidStroke",
                                                "enable": true,
                                                "capStyle": "Round",
                                                "joinStyle": "Round",
                                                "lineStyle3D": "Strip",
                                                "miterLimit": 10,
                                                "width": 0,
                                                "color": [
                                                    110,
                                                    110,
                                                    110,
                                                    255
                                                ]
                                            },
                                            {
                                                "type": "CIMSolidFill",
                                                "enable": true,
                                                "color": color.toJSON()
                                            }
                                        ]
                                    }
                                }
                            ],
                            "scaleSymbolsProportionally": true,
                            "respectFrame": true
                        }
                    ]
                };
                break;
            case "home":
                marker = {
                    "type": "CIMPointSymbol",
                    "symbolLayers": [
                        {
                            "type": "CIMVectorMarker",
                            "enable": true,
                            "anchorPointUnits": "Relative",
                            "dominantSizeAxis3D": "Y",
                            "size": mapPinSize,
                            "billboardMode3D": "FaceNearPlane",
                            "frame": {
                                "xmin": 0,
                                "ymin": 0,
                                "xmax": 21,
                                "ymax": 21
                            },
                            "markerGraphics": [
                                {
                                    "type": "CIMMarkerGraphic",
                                    "geometry": {
                                        "rings": [
                                            [
                                                [
                                                    18,
                                                    11
                                                ],
                                                [
                                                    17,
                                                    11
                                                ],
                                                [
                                                    17,
                                                    5
                                                ],
                                                [
                                                    18,
                                                    5
                                                ],
                                                [
                                                    18,
                                                    4
                                                ],
                                                [
                                                    3,
                                                    4
                                                ],
                                                [
                                                    3,
                                                    5
                                                ],
                                                [
                                                    4,
                                                    5
                                                ],
                                                [
                                                    4,
                                                    11
                                                ],
                                                [
                                                    3,
                                                    11
                                                ],
                                                [
                                                    3,
                                                    12
                                                ],
                                                [
                                                    10.5,
                                                    18
                                                ],
                                                [
                                                    18,
                                                    12
                                                ],
                                                [
                                                    18,
                                                    11
                                                ]
                                            ],
                                            [
                                                [
                                                    6,
                                                    11
                                                ],
                                                [
                                                    6,
                                                    8
                                                ],
                                                [
                                                    9,
                                                    8
                                                ],
                                                [
                                                    9,
                                                    11
                                                ],
                                                [
                                                    6,
                                                    11
                                                ]
                                            ],
                                            [
                                                [
                                                    12,
                                                    5
                                                ],
                                                [
                                                    15,
                                                    5
                                                ],
                                                [
                                                    15,
                                                    11
                                                ],
                                                [
                                                    12,
                                                    11
                                                ],
                                                [
                                                    12,
                                                    5
                                                ]
                                            ]
                                        ]
                                    },
                                    "symbol": {
                                        "type": "CIMPolygonSymbol",
                                        "symbolLayers": [
                                            {
                                                "type": "CIMSolidStroke",
                                                "enable": true,
                                                "capStyle": "Round",
                                                "joinStyle": "Round",
                                                "lineStyle3D": "Strip",
                                                "miterLimit": 10,
                                                "width": 0,
                                                "color": [
                                                    0,
                                                    0,
                                                    0,
                                                    255
                                                ]
                                            },
                                            {
                                                "type": "CIMSolidFill",
                                                "enable": true,
                                                "color": color.toJSON()
                                            }
                                        ]
                                    }
                                }
                            ],
                            "scaleSymbolsProportionally": true,
                            "respectFrame": true
                        }
                    ]
                };
                break;
        }
        return marker;
    }
    exports.getSymbol = getSymbol;
});
