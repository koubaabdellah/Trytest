/*
 *   Copyright (c) 2022 Esri
 *   All rights reserved.

 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at

 *   http://www.apache.org/licenses/LICENSE-2.0

 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
define(["require", "exports", "tslib", "esri/core/accessorSupport/decorators", "esri/widgets/support/widget", "./Header", "./Layout/LayoutViewModel", "esri/widgets/Widget", "esri/core/watchUtils", "../utils/themeUtils"], function (require, exports, tslib_1, decorators_1, widget_1, Header_1, LayoutViewModel_1, Widget_1, watchUtils_1, themeUtils_1) {
    "use strict";
    Header_1 = tslib_1.__importDefault(Header_1);
    LayoutViewModel_1 = tslib_1.__importDefault(LayoutViewModel_1);
    Widget_1 = tslib_1.__importDefault(Widget_1);
    var CSS = {
        base: "embed-app__layout",
        shellContainer: "calcite-shell-container",
        viewContainer: "embed-app__view-container",
        error: "embed-app__layout-error"
    };
    var Layout = /** @class */ (function (_super) {
        tslib_1.__extends(Layout, _super);
        function Layout(props) {
            var _this = _super.call(this, props) || this;
            _this.view = null;
            _this.state = null;
            _this.viewModel = new LayoutViewModel_1.default();
            _this.calciteShell = null;
            _this._header = null;
            return _this;
        }
        Layout.prototype.initialize = function () {
            var _this = this;
            this.own([(0, watchUtils_1.whenEqualOnce)(this, "state", "ready", function () {
                    var _a;
                    if (_this._header && !((_a = _this._header) === null || _a === void 0 ? void 0 : _a.view)) {
                        _this._header.view = _this.view;
                    }
                })]);
        };
        Layout.prototype.postInitialize = function () {
            var _this = this;
            this.sharedTheme = (0, themeUtils_1.createSharedTheme)(this.applicationConfig, this.applicationBase.portal);
            this.own([(0, watchUtils_1.whenOnce)(this, "view.ready", function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return tslib_1.__generator(this, function (_a) {
                        (0, watchUtils_1.init)(this, ["sharedTheme.text", "sharedTheme.background", "applicationConfig.header", "applicationConfig.theme", "applicationConfig.applySharedTheme", "applicationConfig.customTheme"], function () {
                            var customTheme = _this.applicationConfig.customTheme;
                            if (customTheme === null || customTheme === void 0 ? void 0 : customTheme.applySharedTheme)
                                (0, themeUtils_1.handleSharedTheme)(_this.sharedTheme, _this.applicationConfig);
                            else {
                                (0, themeUtils_1.handleCustomTheme)(_this.applicationConfig);
                            }
                        });
                        return [2 /*return*/];
                    });
                }); })]);
        };
        Layout.prototype.render = function () {
            var _a = this.applicationConfig, theme = _a.theme, header = _a.header, layoutType = _a.layoutType;
            var themeClass = theme === "dark" ? "calcite-theme-dark" : "calcite-theme-light";
            var headerSection = this.renderHeader();
            var loader = this.state === "loading" ? ((0, widget_1.tsx)("calcite-loader", { isActive: true })) : null;
            return ((0, widget_1.tsx)("div", { class: this.classes(CSS.shellContainer, header ? "header" : null) },
                (0, widget_1.tsx)("calcite-shell", { class: this.classes(themeClass), bind: this, afterCreate: widget_1.storeNode, "data-node-ref": "calciteShell" }, headerSection === null || headerSection === void 0 ? void 0 :
                    headerSection.render(),
                    (0, widget_1.tsx)("div", { class: this.classes(CSS.viewContainer) },
                        loader,
                        (0, widget_1.tsx)("div", { bind: this, class: layoutType, dir: "ltr", afterCreate: this.viewModel.createMap })))));
        };
        Layout.prototype.renderHeader = function () {
            var _a;
            if (!this._header) {
                var headerProps = {
                    applicationConfig: this.applicationConfig,
                    sharedTheme: this === null || this === void 0 ? void 0 : this.sharedTheme,
                    portal: (_a = this === null || this === void 0 ? void 0 : this.applicationBase) === null || _a === void 0 ? void 0 : _a.portal,
                    view: this.view
                };
                this._header = new Header_1.default(headerProps);
            }
            return this._header;
        };
        tslib_1.__decorate([
            (0, decorators_1.aliasOf)("viewModel.applicationConfig")
        ], Layout.prototype, "applicationConfig", void 0);
        tslib_1.__decorate([
            (0, decorators_1.aliasOf)("viewModel.applicationBase")
        ], Layout.prototype, "applicationBase", void 0);
        tslib_1.__decorate([
            (0, decorators_1.aliasOf)("viewModel.initialExtent")
        ], Layout.prototype, "initialExtent", void 0);
        tslib_1.__decorate([
            (0, decorators_1.aliasOf)("viewModel.item")
        ], Layout.prototype, "item", void 0);
        tslib_1.__decorate([
            (0, decorators_1.aliasOf)("viewModel.view")
        ], Layout.prototype, "view", void 0);
        tslib_1.__decorate([
            (0, decorators_1.aliasOf)("viewModel.state")
        ], Layout.prototype, "state", void 0);
        tslib_1.__decorate([
            (0, decorators_1.property)()
        ], Layout.prototype, "viewModel", void 0);
        tslib_1.__decorate([
            (0, decorators_1.property)()
        ], Layout.prototype, "sharedTheme", void 0);
        tslib_1.__decorate([
            (0, decorators_1.property)()
        ], Layout.prototype, "calciteShell", void 0);
        Layout = tslib_1.__decorate([
            (0, decorators_1.subclass)("Layout")
        ], Layout);
        return Layout;
    }((Widget_1.default)));
    return Layout;
});
