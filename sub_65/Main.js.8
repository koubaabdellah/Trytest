var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define(["require", "exports", "TemplatesCommonLib/structuralFunctionality/telemetry/telemetry", "esri/Graphic", "esri/core/Handles", "./utilites/lookupLayerUtils", "./utilites/esriWidgetUtils", "esri/core/watchUtils", "./components/DisplayLookupResults", "./components/Header", "./components/MapPanel", "./utilites/themeUtils", "TemplatesCommonLib/baseClasses/support/domHelper", "TemplatesCommonLib/baseClasses/support/itemUtils", "./ConfigurationSettings", "./components/DetailPanel", "./components/LookupGraphics", "esri/core/promiseUtils", "esri/geometry/support/jsonUtils", "./components/FilterPanel", "esri/layers/ElevationLayer", "esri/geometry/Point", "TemplatesCommonLib/structuralFunctionality/a11yUtils", "./utilites/utils", "./utilites/themeUtils", "esri/layers/RouteLayer"], function (require, exports, telemetry_1, Graphic_1, Handles_1, lookupLayerUtils_1, esriWidgetUtils_1, watchUtils_1, DisplayLookupResults_1, Header_1, MapPanel_1, themeUtils_1, domHelper_1, itemUtils_1, ConfigurationSettings_1, DetailPanel_1, LookupGraphics_1, promiseUtils_1, jsonUtils_1, FilterPanel_1, ElevationLayer_1, Point_1, a11yUtils_1, utils_1, themeUtils_2, RouteLayer) {
    "use strict";
    telemetry_1 = __importDefault(telemetry_1);
    Graphic_1 = __importDefault(Graphic_1);
    Handles_1 = __importDefault(Handles_1);
    DisplayLookupResults_1 = __importDefault(DisplayLookupResults_1);
    Header_1 = __importDefault(Header_1);
    MapPanel_1 = __importDefault(MapPanel_1);
    ConfigurationSettings_1 = __importDefault(ConfigurationSettings_1);
    DetailPanel_1 = __importDefault(DetailPanel_1);
    LookupGraphics_1 = __importDefault(LookupGraphics_1);
    FilterPanel_1 = __importDefault(FilterPanel_1);
    ElevationLayer_1 = __importDefault(ElevationLayer_1);
    Point_1 = __importDefault(Point_1);
    var CSS = {
        loading: 'configurable-application--loading'
    };
    var LocationApp = /** @class */ (function () {
        function LocationApp() {
            this._appConfig = null;
            this.telemetry = null;
            this.searchWidget = null;
            this.mapPanel = null;
            this._detailPanel = null;
            this._mapButton = null;
            this._handles = new Handles_1.default();
            this._defaultViewRotation = 0;
            this._results = null;
            this._filterPanel = null;
            //----------------------------------
            //  ApplicationBase
            //----------------------------------
            this.base = null;
            this._telemetry = null;
            this.page = null;
        }
        //--------------------------------------------------------------------------
        //
        //  Public Methods
        //
        //--------------------------------------------------------------------------
        LocationApp.prototype.init = function (base) {
            var _this = this;
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            if (!base) {
                console.error('ApplicationBase is not defined');
                return;
            }
            this._updateMapVisibility(base.config);
            this.base = base;
            var config = base.config, results = base.results;
            config.helperServices = __assign({}, base.portal.helperServices);
            if (config === null || config === void 0 ? void 0 : config.exportPDF) {
                config.exportToPDF = config.exportPDF;
            }
            var webMapItems = results.webMapItems;
            this._appConfig = new ConfigurationSettings_1.default(config);
            (0, themeUtils_1.updateThemeConfig)(config);
            (0, a11yUtils_1.setupLiveRegion)();
            (0, utils_1.handleSearchTypeConfig)(this._appConfig);
            this.createTelemetry();
            // Workaround to issue where slider range is undefined
            if (((_a = this._appConfig) === null || _a === void 0 ? void 0 : _a.sliderRange) === undefined || ((_b = this._appConfig) === null || _b === void 0 ? void 0 : _b.sliderRange) === null) {
                this._appConfig.sliderRange = {
                    default: 1,
                    minimum: 0,
                    maximum: 2
                };
            }
            this._handles.add([(0, watchUtils_1.init)(this._appConfig, "enableBufferSearch", function () {
                    (0, utils_1.handleSearchTypeConfig)(_this._appConfig);
                    var _a = _this._appConfig, singleLocationPolygons = _a.singleLocationPolygons, enableBufferSearch = _a.enableBufferSearch;
                    enableBufferSearch && !singleLocationPolygons ? document.body.classList.add("buffer") : document.body.classList.remove("buffer");
                }), (0, watchUtils_1.init)(this._appConfig, ["hideMap"], function () {
                    _this._updateMapVisibility(_this._appConfig);
                }),
                (0, watchUtils_1.init)(this._appConfig, ["applyCustomTheme", "customCSS", "applySharedTheme", "customTheme", "theme"], function (a, b, c) {
                    var _a, _b, _c, _d, _e;
                    var _f = _this._appConfig, customTheme = _f.customTheme, customCSS = _f.customCSS;
                    if (!customTheme) {
                        (0, themeUtils_2.handleOldConfig)(_this._appConfig, (_a = _this === null || _this === void 0 ? void 0 : _this.base) === null || _a === void 0 ? void 0 : _a.portal);
                    }
                    var sharedThemeProps = (_d = (_c = (_b = _this === null || _this === void 0 ? void 0 : _this.base) === null || _b === void 0 ? void 0 : _b.portal) === null || _c === void 0 ? void 0 : _c.portalProperties) === null || _d === void 0 ? void 0 : _d.sharedTheme;
                    if ((customTheme === null || customTheme === void 0 ? void 0 : customTheme.applySharedTheme) && !(customTheme === null || customTheme === void 0 ? void 0 : customTheme.logo) && ((_e = sharedThemeProps === null || sharedThemeProps === void 0 ? void 0 : sharedThemeProps.logo) === null || _e === void 0 ? void 0 : _e.small)) {
                        customTheme.logo = sharedThemeProps.logo.small;
                    }
                    _this._cleanUpResults();
                    _this.handleThemeUpdates();
                }), (0, watchUtils_1.init)(this._appConfig, ["coverPage"], function (newValue, oldValue, propertyName) {
                    _this._createPage();
                }), (0, watchUtils_1.init)(this._appConfig, "panelSize", function (newValue, oldValue, propertyName) {
                    // update panel size
                    var panelSize = _this._appConfig.panelSize;
                    var small = "column-6";
                    var medium = "column-10";
                    var large = "column-12";
                    var nodes = document.querySelectorAll(".size-panel");
                    nodes.forEach(function (node) {
                        node.classList.remove(small, medium, large);
                        if (panelSize === "s") {
                            node.classList.add(small);
                        }
                        else if (panelSize === "m") {
                            node.classList.add(medium);
                        }
                        else {
                            node.classList.add(large);
                        }
                    });
                })], "configuration");
            // Get web map
            var allItems = webMapItems.map(function (item) {
                return item;
            });
            var validWebMapItems = [];
            allItems.forEach(function (response) {
                if (response === null || response === void 0 ? void 0 : response.error) {
                    return;
                }
                validWebMapItems.push(response.value);
            });
            var item = validWebMapItems[0];
            if (!item) {
                console.error("Could not load an item to display");
                // show error page
                document.location.href = "../../shared/unavailable/index.html?appid=".concat((_d = (_c = this.base.config) === null || _c === void 0 ? void 0 : _c.appid) !== null && _d !== void 0 ? _d : null);
                return;
            }
            // Set the title to the app value if it exists
            var title = this._appConfig.title;
            if (!title) {
                title = ((_h = (_g = (_f = (_e = this === null || this === void 0 ? void 0 : this.base) === null || _e === void 0 ? void 0 : _e.results) === null || _f === void 0 ? void 0 : _f.applicationItem) === null || _g === void 0 ? void 0 : _g.value) === null || _h === void 0 ? void 0 : _h.title) ? (_m = (_l = (_k = (_j = this === null || this === void 0 ? void 0 : this.base) === null || _j === void 0 ? void 0 : _j.results) === null || _k === void 0 ? void 0 : _k.applicationItem) === null || _l === void 0 ? void 0 : _l.value) === null || _m === void 0 ? void 0 : _m.title : (0, itemUtils_1.getItemTitle)(item);
            }
            this._appConfig.title = title;
            (0, domHelper_1.setPageTitle)(title);
            this._createMap(item);
        };
        LocationApp.prototype._createMap = function (item) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, panelHandle;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, new MapPanel_1.default({
                                    item: item,
                                    config: this._appConfig,
                                    base: this.base,
                                    container: 'mapPanel'
                                })];
                        case 1:
                            _a.mapPanel = _b.sent();
                            this._handles.add(this.mapPanel.watch("isMobileView", function (isMobile) {
                                var _a, _b;
                                // enable popup in mobile view
                                _this.view.popup.autoOpenEnabled = isMobile;
                                (isMobile) ? (_a = _this.mapPanel) === null || _a === void 0 ? void 0 : _a.set("tabindex", "-1") : (_b = _this.mapPanel) === null || _b === void 0 ? void 0 : _b.set("tabindex", "0");
                            }), "popupvis");
                            panelHandle = this.mapPanel.watch('view', function () {
                                var title = _this._appConfig.title;
                                panelHandle.remove();
                                if (!title) {
                                    _this._appConfig.title = item.title || null;
                                }
                                _this.view = _this.mapPanel.view;
                                _this._defaultViewRotation = _this.view.rotation || 0;
                                // watch properties that determine how results are displayed
                                _this._handles.add([(0, watchUtils_1.init)(_this._appConfig, ["searchUnits", "includeDistance", "interactiveResults", "groupResultsByLayer"], function () {
                                        if (_this._results) {
                                            var copyResults = _this._results;
                                            _this._cleanUpResults();
                                            _this._displayResults(copyResults);
                                        }
                                    }), (0, watchUtils_1.init)(_this._appConfig, "extentSelectorConfig, extentSelector", function () {
                                        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
                                        if (((_a = _this._appConfig) === null || _a === void 0 ? void 0 : _a.extentSelectorConfig) && ((_b = _this._appConfig) === null || _b === void 0 ? void 0 : _b.extentSelector)) {
                                            var constraints = _this._appConfig.extentSelectorConfig.constraints;
                                            var geometry = constraints === null || constraints === void 0 ? void 0 : constraints.geometry;
                                            if (geometry) {
                                                var extent_1 = (0, jsonUtils_1.fromJSON)(geometry);
                                                if (extent_1 && ((extent_1 === null || extent_1 === void 0 ? void 0 : extent_1.type) === "extent" || (extent_1 === null || extent_1 === void 0 ? void 0 : extent_1.type) === "polygon")) {
                                                    constraints.geometry = extent_1;
                                                    _this.view.goTo(extent_1, {
                                                        animate: false
                                                    }).catch(function () { });
                                                    (_e = (_d = (_c = _this.searchWidget) === null || _c === void 0 ? void 0 : _c.viewModel) === null || _d === void 0 ? void 0 : _d.allSources) === null || _e === void 0 ? void 0 : _e.forEach(function (source) {
                                                        source.filter = {
                                                            geometry: extent_1
                                                        };
                                                    });
                                                }
                                            }
                                            else {
                                                constraints.geometry = null;
                                                (_h = (_g = (_f = _this.searchWidget) === null || _f === void 0 ? void 0 : _f.viewModel) === null || _g === void 0 ? void 0 : _g.allSources) === null || _h === void 0 ? void 0 : _h.forEach(function (source) {
                                                    source.filter = null;
                                                });
                                            }
                                            constraints.minScale = +constraints.minScale;
                                            constraints.maxScale = +constraints.maxScale;
                                            _this.view.constraints = constraints;
                                            _this._setMapViewRotation();
                                        }
                                        else {
                                            if (_this.view) {
                                                _this.view.rotation = _this._defaultViewRotation;
                                                _this.view.constraints.geometry = null;
                                                _this.view.constraints.minZoom = -1;
                                                _this.view.constraints.maxZoom = -1;
                                                _this.view.constraints.minScale = 0;
                                                _this.view.constraints.maxScale = 0;
                                            }
                                            (_j = _this === null || _this === void 0 ? void 0 : _this.mapPanel) === null || _j === void 0 ? void 0 : _j.resetExtent();
                                        }
                                    }),], "configuration");
                                _this.view.popup.autoOpenEnabled = false;
                                _this.view.popup.actions = null;
                                document.body.classList.remove(CSS.loading);
                                _this.view.when(function () {
                                    _this._addWidgets();
                                    _this._addHeader(item);
                                    // watch for option/cmd + m key
                                    document.addEventListener("keydown", function (e) {
                                        var _a;
                                        if ((e === null || e === void 0 ? void 0 : e.altKey) && (e === null || e === void 0 ? void 0 : e.code) === "KeyM") {
                                            (_a = _this === null || _this === void 0 ? void 0 : _this.view) === null || _a === void 0 ? void 0 : _a.focus();
                                        }
                                    });
                                });
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        LocationApp.prototype._addHeader = function (item) {
            var _this = this;
            // Add info button
            this._detailPanel = new DetailPanel_1.default({
                config: this._appConfig,
                view: this.view,
                mapPanel: this.mapPanel,
                portal: item === null || item === void 0 ? void 0 : item.portal,
                container: document.getElementById('detailPanel')
            });
            var headerWidget = new Header_1.default({
                config: this._appConfig,
                detailPanel: this._detailPanel,
                portal: this.base.portal,
                view: this.view,
                container: 'header'
            });
            (0, watchUtils_1.init)(this._appConfig, "showIntroduction, infoButtonPosition, header", function (value, oldValue, propertyName) {
                var _a, _b, _c, _d, _e;
                var _f = _this._appConfig, showIntroduction = _f.showIntroduction, header = _f.header, infoButtonPosition = _f.infoButtonPosition;
                var mapButton = _this.view.ui.find("map-info-button");
                // When showIntroduction is false hide detail panel otherwise open
                if (propertyName === "showIntroduction") {
                    !showIntroduction ? (_a = _this === null || _this === void 0 ? void 0 : _this._detailPanel) === null || _a === void 0 ? void 0 : _a.hidePanel() : (_b = _this === null || _this === void 0 ? void 0 : _this._detailPanel) === null || _b === void 0 ? void 0 : _b.showPanel();
                }
                if (propertyName === "header")
                    // If header is disabled but intro is enabled add intro to the main map
                    if (header && mapButton) {
                        // remove the map button
                        (_d = (_c = _this === null || _this === void 0 ? void 0 : _this.view) === null || _c === void 0 ? void 0 : _c.ui) === null || _d === void 0 ? void 0 : _d.remove(mapButton);
                        (_e = _this === null || _this === void 0 ? void 0 : _this._detailPanel) === null || _e === void 0 ? void 0 : _e.hidePanel();
                    }
                    else if (!header && showIntroduction && !mapButton) {
                        // add the map button to the view
                        var infoButton = headerWidget === null || headerWidget === void 0 ? void 0 : headerWidget.createInfoButton();
                        if (!infoButton)
                            return;
                        infoButton.id = "map-info-button";
                        _this.view.ui.add(infoButton, infoButtonPosition);
                        _this._detailPanel.showPanel();
                    }
                if (propertyName === "infoButtonPosition" && mapButton) {
                    _this.view.ui.move(mapButton, infoButtonPosition);
                }
            });
        };
        LocationApp.prototype._createPage = function () {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var Page, _b, coverPage, coverPageConfig, appContainer, container, props;
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, new Promise(function (resolve_1, reject_1) { require(["./components/Page/Page"], resolve_1, reject_1); }).then(__importStar)];
                        case 1:
                            Page = _c.sent();
                            _b = this._appConfig, coverPage = _b.coverPage, coverPageConfig = _b.coverPageConfig;
                            appContainer = document.getElementById("appMain");
                            if (coverPage && !this.page) {
                                container = document.createElement("div");
                                props = __assign({ portal: this.base.portal, container: container }, coverPageConfig);
                                this.page = new Page.default(props);
                                appContainer.classList.add("hide");
                                // watch for config updates
                                this._handles.add((0, watchUtils_1.watch)(this._appConfig, "coverPageConfig", function () {
                                    if (!_this.page)
                                        return;
                                    var coverPageConfig = _this._appConfig.coverPageConfig;
                                    var keys = Object.keys(coverPageConfig);
                                    keys.forEach(function (key) {
                                        _this.page.set(key, coverPageConfig[key]);
                                    });
                                }), "page");
                            }
                            else {
                                appContainer === null || appContainer === void 0 ? void 0 : appContainer.classList.remove("hide");
                                this._handles.remove("page");
                                (_a = this.page) === null || _a === void 0 ? void 0 : _a.destroy();
                                this.page = null;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        LocationApp.prototype._addWidgets = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    // Add esri widgets to the app (legend, home etc)
                    (0, esriWidgetUtils_1.addMapComponents)({
                        view: this.view,
                        config: this._appConfig,
                        portal: this.base.portal
                    });
                    this._setupFeatureSearch();
                    this._handles.add([(0, watchUtils_1.init)(this._appConfig, ["locateWidget", "locateWidgetPosition"], function (newValue, oldValue, propertyName) {
                            _this.addLocate(_this.view, _this._appConfig, propertyName);
                        })], "configuration");
                    return [2 /*return*/];
                });
            });
        };
        LocationApp.prototype.addLocate = function (view, config, propertyName) {
            return __awaiter(this, void 0, void 0, function () {
                var locateWidget, locateWidgetPosition, Locate, node, locationWidget;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            locateWidget = config.locateWidget, locateWidgetPosition = config.locateWidgetPosition;
                            return [4 /*yield*/, new Promise(function (resolve_2, reject_2) { require(['esri/widgets/Locate'], resolve_2, reject_2); }).then(__importStar)];
                        case 1:
                            Locate = _a.sent();
                            node = (0, utils_1._findNode)("esri-locate");
                            if (!locateWidget) {
                                if (node)
                                    view.ui.remove(node);
                                return [2 /*return*/];
                            }
                            if (node && !locateWidget)
                                view.ui.remove(node);
                            if (propertyName === "locateWidgetPosition" && node) {
                                view.ui.move(node, locateWidgetPosition);
                            }
                            else if (propertyName === "locateWidget") {
                                locationWidget = new Locate.default({ view: view, popupEnabled: false, graphic: null });
                                locationWidget.on("locate", function (location) {
                                    var _a;
                                    // clear existing then search
                                    _this._cleanUpResults();
                                    if ((_a = location === null || location === void 0 ? void 0 : location.position) === null || _a === void 0 ? void 0 : _a.coords) {
                                        _this._searchByGeometry(new Point_1.default(location.position.coords));
                                    }
                                });
                                view.ui.add(locationWidget, locateWidgetPosition);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        LocationApp.prototype._setupFeatureSearch = function () {
            var _a, _b, _c, _d, _e;
            return __awaiter(this, void 0, void 0, function () {
                var modules, _f, RefineResults, SearchPanel, container, refineResultsPanel, searchPanel, lookupGraphics;
                var _this = this;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0: return [4 /*yield*/, (0, promiseUtils_1.eachAlways)([new Promise(function (resolve_3, reject_3) { require(["./components/RefineResults"], resolve_3, reject_3); }).then(__importStar), new Promise(function (resolve_4, reject_4) { require(["./components/SearchPanel"], resolve_4, reject_4); }).then(__importStar)])];
                        case 1:
                            modules = _g.sent();
                            _f = modules.map(function (module) { return module.value; }), RefineResults = _f[0], SearchPanel = _f[1];
                            if (!RefineResults && !SearchPanel) {
                                return [2 /*return*/];
                            }
                            container = document.getElementById("distanceOptions");
                            // Get url param if applied
                            if (((_b = (_a = this === null || this === void 0 ? void 0 : this.base) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.sliderDistance) && ((_c = this._appConfig) === null || _c === void 0 ? void 0 : _c.enableBufferSearch)) {
                                if ((_e = (_d = this._appConfig) === null || _d === void 0 ? void 0 : _d.sliderRange) === null || _e === void 0 ? void 0 : _e.default)
                                    this._appConfig.sliderRange["default"] = this.base.config.sliderDistance;
                            }
                            this._filterPanel = new FilterPanel_1.default({
                                config: this._appConfig,
                                view: this.view,
                                container: document.getElementById('filterPanel')
                            });
                            refineResultsPanel = new RefineResults.default({
                                config: this._appConfig,
                                container: container
                            });
                            searchPanel = new SearchPanel.default({
                                config: this._appConfig,
                                view: this.view,
                                filterPanel: this._filterPanel,
                                container: document.getElementById("searchPanel")
                            });
                            (0, watchUtils_1.when)(searchPanel, "state", function () {
                                if ((searchPanel === null || searchPanel === void 0 ? void 0 : searchPanel.state) !== "ready") {
                                    return;
                                }
                                _this.searchWidget = searchPanel.searchWidget;
                                _this.searchWidget.on("search-focus", function () {
                                    var _a;
                                    // if users type in input box close info panel
                                    (_a = _this === null || _this === void 0 ? void 0 : _this._detailPanel) === null || _a === void 0 ? void 0 : _a.hidePanel();
                                });
                                _this.searchWidget.on('search-clear', function () {
                                    var _a;
                                    _this._cleanUpResults();
                                    container.classList.remove("hide-search-btn");
                                    if (_this._appConfig.enableBufferSearch) {
                                        (_a = _this._mapButton) === null || _a === void 0 ? void 0 : _a.classList.add("hide");
                                    }
                                    // Remove find url param
                                    _this._updateUrlParam();
                                    _this._searchFeature = null;
                                });
                                _this.searchWidget.on('search-complete', function (results) { return __awaiter(_this, void 0, void 0, function () {
                                    var handle_1;
                                    var _this = this;
                                    return __generator(this, function (_a) {
                                        // find url param
                                        this._cleanUpResults();
                                        if (results.numResults > 0) {
                                            // Add find url param
                                            container.classList.add("hide-search-btn");
                                            this._displayResults(results);
                                            handle_1 = (0, watchUtils_1.watch)(this.lookupResults.accordion, "featureResults", function (r) {
                                                _this.searchWidget.blur();
                                                handle_1.remove();
                                                if ((r === null || r === void 0 ? void 0 : r.length) > 0) {
                                                    setTimeout(function () {
                                                        (0, utils_1.removeFocus)();
                                                        var elements = document.getElementsByClassName("feature-group-container");
                                                        if (elements[0]) {
                                                            (0, utils_1.setFieldFocus)(elements[0]);
                                                        }
                                                    }, 500);
                                                }
                                                else {
                                                    _this.searchWidget.focus();
                                                }
                                            });
                                        }
                                        else {
                                            this.lookupResults.addNotice();
                                        }
                                        return [2 /*return*/];
                                    });
                                }); });
                                _this.view.on('click', function (e) { return __awaiter(_this, void 0, void 0, function () {
                                    var _a, _b, _c, _d;
                                    return __generator(this, function (_e) {
                                        if ((_b = (_a = document === null || document === void 0 ? void 0 : document.body) === null || _a === void 0 ? void 0 : _a.classList) === null || _b === void 0 ? void 0 : _b.contains("mobile-view-expand"))
                                            return [2 /*return*/];
                                        if ((_d = (_c = document === null || document === void 0 ? void 0 : document.body) === null || _c === void 0 ? void 0 : _c.classList) === null || _d === void 0 ? void 0 : _d.contains("measure-active"))
                                            return [2 /*return*/];
                                        this._searchByGeometry(e.mapPoint);
                                        return [2 /*return*/];
                                    });
                                }); });
                                _this._handles.add((0, watchUtils_1.init)(_this._appConfig, "enableBufferSearch", function () {
                                    (0, utils_1.handleSearchTypeConfig)(_this._appConfig);
                                    _this._addMapButton();
                                }), "configuration");
                                var _a = _this._appConfig, select = _a.select, level = _a.level, center = _a.center, enableBufferSearch = _a.enableBufferSearch, find = _a.find;
                                if (select && level && center) {
                                    var location_1 = center.split(",");
                                    if ((location_1 === null || location_1 === void 0 ? void 0 : location_1.length) > 1) {
                                        var point = new Point_1.default({ longitude: location_1[0], latitude: location_1[1] });
                                        enableBufferSearch ? _this._searchByGeometry(point) : _this._searchThisExtent(point);
                                    }
                                }
                                else if (find && !enableBufferSearch) {
                                    _this._hideExtentSearchButton();
                                }
                            });
                            (0, watchUtils_1.whenDefinedOnce)(this._filterPanel, "filterList", function () {
                                // Apply filter expressions from URL params
                                /*if (this?.base?.config?.filter) {
                                    const filters = this.base.config.filter?.split(";").map(filter => JSON.parse(filter));
                                    filters?.forEach(filter => {
                                        const layerExpressions = this._filterPanel?.filterList?.layerExpressions;
                                        layerExpressions?.forEach(layerExpression => {
                                            if (filter?.layerId === layerExpression.id) {
                                                layerExpression.expressions?.forEach(expression => {
                                                    if (expression.id?.toString() === filter?.expressionId?.toString()) {
                                                        expression.checked = true;
                                                        if (filter.type === "range") {
                                                            expression.range = { min: filter.value.min, max: filter.value.max };
                                                        } else if (filter.type === "select") {
                                                            expression.selectedFields = filter.value;
                                                        }
                                                    }
                    
                                                })
                                            }
                                        });
                                    });
                                }*/
                                var _a, _b;
                                _this._handles.add((_a = _this._filterPanel) === null || _a === void 0 ? void 0 : _a.filterList.watch("output", function (output) {
                                    var id = output.id;
                                    var expression = _this._filterPanel.addDefaultExpression(output);
                                    _this._cleanUpResults();
                                    _this._updateUrlParam();
                                    var layer = _this.view.map.findLayerById(id);
                                    if (layer) {
                                        layer.definitionExpression = expression;
                                        if (!_this._searchFeature)
                                            return;
                                        _this._generateSearchResults();
                                    }
                                }));
                                (_b = _this._filterPanel) === null || _b === void 0 ? void 0 : _b.filterList.on("filterListReset", function (resetLayerExpressions) {
                                    resetLayerExpressions === null || resetLayerExpressions === void 0 ? void 0 : resetLayerExpressions.forEach(function (layerExpression) {
                                        var _a;
                                        var id = layerExpression.id;
                                        var layer = (_a = _this === null || _this === void 0 ? void 0 : _this.view) === null || _a === void 0 ? void 0 : _a.map.findLayerById(id);
                                        if (layer) {
                                            // Check for default layer expression
                                            layer.definitionExpression = _this._filterPanel.findDefaultExpression(layerExpression);
                                            _this._cleanUpResults();
                                            _this._generateSearchResults();
                                            _this._updateUrlParam();
                                        }
                                    });
                                });
                            });
                            this._handles.add((0, watchUtils_1.init)(this._appConfig, ["enableFilter", "filterConfig", "expandFilters", "theme", "sliderRange", "searchUnits", "precision", "inputsEnabled"], function (value, oldValue, propertyName) {
                                if (propertyName === "enableFilter" || propertyName === "theme" || propertyName === "filterConfig" || propertyName === "expandFilters") {
                                    searchPanel === null || searchPanel === void 0 ? void 0 : searchPanel.updateFilterProps(propertyName, value);
                                }
                                else {
                                    if (refineResultsPanel)
                                        refineResultsPanel.updateSliderProps(propertyName, value);
                                }
                            }), "configuration");
                            refineResultsPanel.watch("value", function (value) {
                                _this._cleanUpResults();
                                if (value)
                                    _this._appConfig.sliderRange["default"] = value;
                                if (!_this._searchFeature)
                                    return;
                                _this._generateSearchResults();
                                _this._updateUrlParam();
                            });
                            lookupGraphics = new LookupGraphics_1.default({
                                view: this.view,
                                config: this._appConfig
                            });
                            this._handles.add((0, watchUtils_1.init)(this._appConfig, ["drawBuffer", "mapPinLabelSize", "mapPinSize", "mapPinIcon", "mapPinLabel", "mapPinLabelColor", "mapPinColor", "mapPin", "bufferTransparency", "enableBufferColor", "bufferColor"], function (value, oldValue, propertyName) {
                                lookupGraphics.updateGraphics(propertyName, value);
                            }), "configuration");
                            this.lookupResults = new DisplayLookupResults_1.default({
                                lookupGraphics: lookupGraphics,
                                config: this._appConfig,
                                view: this.view,
                                mapPanel: this.mapPanel,
                                portal: this.base.config.portal,
                                container: 'resultsPanel'
                            });
                            this._handles.add((0, watchUtils_1.init)(this._appConfig, ["lookupLayers", "hideLayers"], function () { return __awaiter(_this, void 0, void 0, function () {
                                var parsedLayers, updatedLayers, lookupLayers;
                                var _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            parsedLayers = ((_a = this._appConfig.lookupLayers) === null || _a === void 0 ? void 0 : _a.layers) ? this._appConfig.lookupLayers.layers : null;
                                            updatedLayers = [];
                                            if (!Array.isArray(parsedLayers) || !parsedLayers.length) {
                                                updatedLayers = parsedLayers = null;
                                            }
                                            else {
                                                // Remove any dups from LookupLayers
                                                updatedLayers = parsedLayers === null || parsedLayers === void 0 ? void 0 : parsedLayers.filter(function (thing, index) {
                                                    var _thing = JSON.stringify(thing);
                                                    return index === parsedLayers.findIndex(function (obj) {
                                                        return JSON.stringify(obj) === _thing;
                                                    });
                                                });
                                            }
                                            return [4 /*yield*/, (0, lookupLayerUtils_1.getLookupLayers)({
                                                    view: this.view,
                                                    lookupLayers: updatedLayers,
                                                    hideFeaturesOnLoad: this._appConfig.hideLayers
                                                })];
                                        case 1:
                                            lookupLayers = _b.sent();
                                            this.lookupResults.lookupLayers = lookupLayers;
                                            this._refreshResults();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }), "configuration");
                            // Wait for view model
                            this._handles.add([(0, watchUtils_1.init)(this._appConfig, "showDirections,useDirectionsApp", function () {
                                    var _a;
                                    if (_this._appConfig.showDirections && !((_a = _this.lookupResults) === null || _a === void 0 ? void 0 : _a.directions) && !_this._appConfig.useDirectionsApp) {
                                        _this._createDirections();
                                        if (_this._results) {
                                            // refresh the results to show directions
                                            _this._displayResults(_this._results);
                                        }
                                    }
                                }), (0, watchUtils_1.init)(this._appConfig, "shareSelected", function () {
                                    if (_this._appConfig.shareSelected) {
                                        _this._refreshResults();
                                    }
                                }), (0, watchUtils_1.init)(this._appConfig, "applyLayerEffects,presetLayerEffects", function () {
                                    _this._refreshResults();
                                }), (0, watchUtils_1.init)(this._appConfig, "showElevationProfile", function (value) {
                                    var _a, _b;
                                    if (!value && ((_a = _this === null || _this === void 0 ? void 0 : _this.lookupResults) === null || _a === void 0 ? void 0 : _a.elevationProfile)) {
                                        if ((_b = _this.lookupResults.elevationProfile) === null || _b === void 0 ? void 0 : _b.input) {
                                            _this.lookupResults.elevationProfile.input = null;
                                        }
                                        _this.lookupResults.elevationProfile = null;
                                    }
                                    else {
                                        _this._createElevationProfile();
                                    }
                                    _this._refreshResults();
                                })], "configuration");
                            this._cleanUpHandles();
                            return [2 /*return*/];
                    }
                });
            });
        };
        LocationApp.prototype._refreshResults = function () {
            if (this._results) {
                // refresh the results
                this._displayResults(this._results);
            }
        };
        LocationApp.prototype._createDirections = function () {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var portalItem, appProxies, url, Directions, container, routeLayer, directionsProps, directions;
                var _this = this;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            if (this.lookupResults.directions && !this.base.config.useDirectionsApp)
                                return [2 /*return*/];
                            portalItem = (_c = (_b = (_a = this.base) === null || _a === void 0 ? void 0 : _a.results) === null || _b === void 0 ? void 0 : _b.applicationItem) === null || _c === void 0 ? void 0 : _c.value;
                            appProxies = (portalItem === null || portalItem === void 0 ? void 0 : portalItem.applicationProxies) ? portalItem.applicationProxies : null;
                            appProxies && appProxies.forEach(function (proxy) {
                                var url = _this.base.config.helperServices.route.url;
                                if (proxy.sourceUrl === url) {
                                    _this.base.config.helperServices.route.url = proxy.proxyUrl;
                                }
                            });
                            url = this.base.config.helperServices.route.url;
                            return [4 /*yield*/, new Promise(function (resolve_5, reject_5) { require(['esri/widgets/Directions'], resolve_5, reject_5); }).then(__importStar)];
                        case 1:
                            Directions = _d.sent();
                            container = document.createElement("div");
                            container.setAttribute("role", "dialog");
                            container.setAttribute("tabindex", "0");
                            container.id = "directionsDialog";
                            routeLayer = new RouteLayer({
                                url: url
                            });
                            this.view.map.add(routeLayer);
                            directionsProps = {
                                layer: routeLayer,
                                container: container
                            };
                            directions = new Directions.default(directionsProps);
                            // add directions to the view's popup
                            (0, watchUtils_1.whenDefinedOnce)(directions, "viewModel", function () {
                                directions.view = _this.view;
                                directions.viewModel.routeParameters.directionsLengthUnits = _this._appConfig.searchUnits;
                                directions.viewModel.routeParameters.returnDirections = true;
                                directions.viewModel.load().catch(function (e) {
                                    if (e && e.message) {
                                        console.log("Problem loading directions:", e.message);
                                    }
                                });
                            });
                            this.lookupResults.directions = directions;
                            (0, watchUtils_1.whenTrueOnce)(this.lookupResults, "directionsReady", function () {
                                if (_this._results)
                                    _this._displayResults(_this._results);
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        LocationApp.prototype._createElevationProfile = function () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
            return __awaiter(this, void 0, void 0, function () {
                var ElevationProfile, epWidget, url;
                return __generator(this, function (_s) {
                    switch (_s.label) {
                        case 0:
                            if (!(!this.lookupResults.elevationProfile && this._appConfig.showElevationProfile)) return [3 /*break*/, 2];
                            return [4 /*yield*/, new Promise(function (resolve_6, reject_6) { require(['esri/widgets/ElevationProfile'], resolve_6, reject_6); }).then(__importStar)];
                        case 1:
                            ElevationProfile = _s.sent();
                            epWidget = new ElevationProfile.default({
                                view: this.view,
                                visibleElements: {
                                    clearButton: false,
                                    sketchButton: false,
                                    selectButton: false
                                }
                            });
                            this.lookupResults.elevationProfile = epWidget;
                            _s.label = 2;
                        case 2:
                            if (((_b = (_a = this === null || this === void 0 ? void 0 : this.view) === null || _a === void 0 ? void 0 : _a.map) === null || _b === void 0 ? void 0 : _b.ground) && this._appConfig.showElevationProfile) {
                                if (((_d = (_c = this.view.map.ground) === null || _c === void 0 ? void 0 : _c.layers) === null || _d === void 0 ? void 0 : _d.length) === 0) {
                                    url = ((_h = (_g = (_f = (_e = this.base) === null || _e === void 0 ? void 0 : _e.config) === null || _f === void 0 ? void 0 : _f.helperServices) === null || _g === void 0 ? void 0 : _g.defaultElevationLayers) === null || _h === void 0 ? void 0 : _h.length) > 0 && ((_m = (_l = (_k = (_j = this.base) === null || _j === void 0 ? void 0 : _j.config) === null || _k === void 0 ? void 0 : _k.helperServices) === null || _l === void 0 ? void 0 : _l.defaultElevationLayers[0]) === null || _m === void 0 ? void 0 : _m.url) ? (_r = (_q = (_p = (_o = this.base) === null || _o === void 0 ? void 0 : _o.config) === null || _p === void 0 ? void 0 : _p.helperServices) === null || _q === void 0 ? void 0 : _q.defaultElevationLayers[0]) === null || _r === void 0 ? void 0 : _r.url : "https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer";
                                    this.view.map.ground.layers.add(new ElevationLayer_1.default({
                                        url: url
                                    }));
                                }
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        LocationApp.prototype._displayResults = function (results) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var searchProps, feature;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (this._appConfig.enableBufferSearch) {
                                (_a = this._mapButton) === null || _a === void 0 ? void 0 : _a.classList.remove("hide");
                            }
                            this._results = results;
                            searchProps = {
                                config: this.base.config,
                                view: this.view,
                                results: results
                            };
                            return [4 /*yield*/, (0, lookupLayerUtils_1.getSearchGeometry)(searchProps)];
                        case 1:
                            feature = _b.sent();
                            this._searchFeature = feature;
                            this._generateSearchResults();
                            return [2 /*return*/];
                    }
                });
            });
        };
        LocationApp.prototype._getSelectedAccordionItem = function (results) {
            if (this.lookupResults.accordion) {
                this.lookupResults.accordion.findAccordionItem(results);
            }
            ;
        };
        LocationApp.prototype._generateSearchResults = function () {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var location;
                return __generator(this, function (_c) {
                    location = this._searchFeature ? this._searchFeature : null;
                    if (location)
                        (_a = this._detailPanel) === null || _a === void 0 ? void 0 : _a.hidePanel();
                    (_b = this.lookupResults) === null || _b === void 0 ? void 0 : _b.queryFeatures(location);
                    this._updateUrlParam();
                    return [2 /*return*/];
                });
            });
        };
        LocationApp.prototype._cleanUpResults = function () {
            var _a, _b, _c, _d, _e;
            // Clear the lookup results displayed in the side panel
            (_a = this === null || this === void 0 ? void 0 : this.lookupResults) === null || _a === void 0 ? void 0 : _a.clearResults();
            document.body.classList.add("no-results");
            (_b = document === null || document === void 0 ? void 0 : document.body) === null || _b === void 0 ? void 0 : _b.classList.remove("mobile-view-expand");
            this._results = null;
            if (!((_c = this === null || this === void 0 ? void 0 : this.mapPanel) === null || _c === void 0 ? void 0 : _c.isMobileView) && ((_d = this === null || this === void 0 ? void 0 : this.view) === null || _d === void 0 ? void 0 : _d.popup)) {
                this.view.popup.autoOpenEnabled = false;
            }
            // clear ui padding
            if (this === null || this === void 0 ? void 0 : this.view)
                this.view.padding = {
                    bottom: 0
                };
            if ((_e = this === null || this === void 0 ? void 0 : this.lookupResults) === null || _e === void 0 ? void 0 : _e.notice) {
                this.lookupResults.notice.dismissNotice();
            }
        };
        LocationApp.prototype._updateUrlParam = function () {
            var _a, _b, _c, _d, _e, _f;
            if ('URLSearchParams' in window) {
                var params = new URLSearchParams(document.location.search);
                var index_1 = 0;
                (_b = (_a = this === null || this === void 0 ? void 0 : this.searchWidget) === null || _a === void 0 ? void 0 : _a.results) === null || _b === void 0 ? void 0 : _b.some(function (result) {
                    var _a;
                    if (((_a = result === null || result === void 0 ? void 0 : result.results) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                        index_1 = result.sourceIndex;
                        return true;
                    }
                    else {
                        return false;
                    }
                });
                // Create and add filter expressions to the url
                /*	const expressions = [];
                    this._filterPanel?.filterList?.layerExpressions?.forEach(layerExpr => {
                        layerExpr?.expressions?.forEach((expression) => {
                            const { checked, range, selectedFields, type } = expression;
                            if (checked) {
                                let tmpExp = null;
                                if (type === "number" || type === "range" || type === "date") {
                                    tmpExp = {
                                        type: "range",
                                        layerId: layerExpr.id,
                                        expressionId: expression?.id,
                                        value: { min: range?.min, max: range?.max }
                                    };
                                } else if (type === "string" || type === "coded-value") {
                                    tmpExp = {
                                        type: "select",
                                        layerId: layerExpr.id,
                                        expressionId: expression?.id,
                                        value: selectedFields
                                    };
                                } else {
                                    tmpExp = {
                                        layerId: layerExpr.id,
                                        expressionId: expression?.id
                                    };
                                }
                                if (tmpExp) {
                                    expressions.push(JSON.stringify(tmpExp));
                                }
                            }
                        });
                    });
                    // Apply Filter params
                    if (expressions?.length > 0) {
                        params.set("filter", (expressions.join(";")));
                    } else {
                        params.delete("filter");
                    }*/
                var searchTerm = ((_c = this === null || this === void 0 ? void 0 : this.searchWidget) === null || _c === void 0 ? void 0 : _c.searchTerm) ? encodeURIComponent(this.searchWidget.searchTerm) : null;
                if (searchTerm) {
                    if (index_1 && (index_1 > 0 || index_1 === 0)) {
                        params.set('findSource', index_1.toString());
                    }
                    else {
                        params.delete('findSource');
                    }
                    params.set('find', encodeURIComponent(this.searchWidget.searchTerm));
                }
                else {
                    params.delete('find');
                    params.delete('findSource');
                }
                // Apply slider filter
                if (((_e = (_d = this._appConfig) === null || _d === void 0 ? void 0 : _d.sliderRange) === null || _e === void 0 ? void 0 : _e.default) && ((_f = this._appConfig) === null || _f === void 0 ? void 0 : _f.enableBufferSearch)) {
                    params.set('sliderDistance', this._appConfig.sliderRange["default"]);
                }
                else {
                    params.delete('sliderDistance');
                }
                if (params && params.toString()) {
                    window.history.replaceState({}, '', "".concat(location.pathname, "?").concat(params, " "));
                }
                else {
                    window.history.replaceState({}, '', "".concat(location.pathname, " "));
                }
            }
        };
        LocationApp.prototype.handleThemeUpdates = function () {
            var _a;
            var _b = this._appConfig, theme = _b.theme, customCSS = _b.customCSS;
            if (theme) {
                var style = document.getElementById("esri-stylesheet");
                style.href = style.href.indexOf("light") !== -1 ? style.href.replace(/light/g, theme) : style.href.replace(/dark/g, theme);
                // add light/dark class
                document.body.classList.add(theme === "light" ? "calcite-theme-light" : "calcite-theme-dark");
                document.body.classList.add(theme === "light" ? "light" : "dark");
                document.body.classList.remove(theme === "light" ? "dark" : "light");
                document.body.classList.remove(theme === "light" ? "calcite-theme-dark" : "calcite-theme-light");
            }
            var sharedTheme = (0, themeUtils_1.createSharedTheme)(this._appConfig, (_a = this === null || this === void 0 ? void 0 : this.base) === null || _a === void 0 ? void 0 : _a.portal);
            (0, themeUtils_1.handleSharedTheme)(sharedTheme, this._appConfig);
            (0, themeUtils_1.handleFontStyles)(this._appConfig);
            if (customCSS) {
                (0, themeUtils_1.createAndAppendStyles)(customCSS);
            }
        };
        LocationApp.prototype.createTelemetry = function () {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var portal, appName, telemTS;
                var _this = this;
                return __generator(this, function (_c) {
                    portal = this.base.portal;
                    appName = (_b = (_a = this.base.config) === null || _a === void 0 ? void 0 : _a.telemetry) === null || _b === void 0 ? void 0 : _b.name;
                    telemTS = new telemetry_1.default({
                        portal: portal,
                        config: this._appConfig,
                        appName: appName
                    });
                    (0, watchUtils_1.whenDefinedOnce)(telemTS, "instance", function (telemInstance) {
                        var _a;
                        if (telemInstance != null) {
                            _this._telemetry = telemInstance;
                            (_a = _this._telemetry) === null || _a === void 0 ? void 0 : _a.logPageView("".concat(window.location.pathname).concat(window.location.search));
                        }
                    });
                    return [2 /*return*/];
                });
            });
        };
        LocationApp.prototype._searchByGeometry = function (point) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var enableBufferSearch, screenPoint, results_1;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            enableBufferSearch = this._appConfig.enableBufferSearch;
                            if (!(this.lookupResults.empty && enableBufferSearch)) return [3 /*break*/, 1];
                            this.searchWidget.search(point);
                            this._searchFeature = new Graphic_1.default({ geometry: point });
                            return [3 /*break*/, 3];
                        case 1:
                            screenPoint = this.view.toScreen(point);
                            return [4 /*yield*/, this.view.hitTest(screenPoint)];
                        case 2:
                            results_1 = _b.sent();
                            // If we are in mobile view let's wait until we switch out
                            this._getSelectedAccordionItem(results_1);
                            if (this.mapPanel.isMobileView) {
                                (0, watchUtils_1.whenFalseOnce)(this.mapPanel, "isMobileView", function () {
                                    _this._getSelectedAccordionItem(results_1);
                                });
                            }
                            _b.label = 3;
                        case 3:
                            if (this._appConfig.enableBufferSearch) {
                                (_a = this._mapButton) === null || _a === void 0 ? void 0 : _a.classList.remove("hide");
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        LocationApp.prototype._addMapButton = function () {
            var _this = this;
            // add clear search button to map view
            if (this._mapButton) {
                this.view.ui.remove(this._mapButton);
                this._mapButton = null;
            }
            this._mapButton = document.createElement("calcite-button");
            this._mapButton.id = "mapSearchButton";
            this._mapButton.color = "blue";
            this._mapButton.classList.add("clear-btn");
            if (this._appConfig.enableBufferSearch) {
                this._mapButton.innerHTML = this.base.config.appBundle.tools.clearLocation;
                this._mapButton.classList.add('hide');
                this._mapButton.addEventListener("click", function () {
                    _this._mapButton.classList.add("hide");
                    _this.searchWidget && _this.searchWidget.clear();
                });
            }
            else {
                // add a "search here button"
                this._mapButton.innerHTML = this.base.config.appBundle.tools.searchThisLocation;
                this._mapButton.addEventListener("click", function () {
                    var _a, _b;
                    _this._searchThisExtent((_b = (_a = _this === null || _this === void 0 ? void 0 : _this.view) === null || _a === void 0 ? void 0 : _a.extent) === null || _b === void 0 ? void 0 : _b.center);
                });
            }
            this.view.ui.add(this._mapButton, 'manual');
        };
        LocationApp.prototype._searchThisExtent = function (point) {
            var _this = this;
            if (!point)
                return;
            // kick off new search using this extent
            this.searchWidget && this.searchWidget.clear();
            var searchHandle = this.searchWidget.on("search-clear", function () {
                searchHandle.remove();
                _this._mapButton.classList.remove('hide');
            });
            this.searchWidget.search(point);
            this._searchFeature = new Graphic_1.default({ geometry: point });
            // hide the button until the extent changes
            this._hideExtentSearchButton();
        };
        LocationApp.prototype._hideExtentSearchButton = function () {
            var _this = this;
            var _a, _b;
            if ((_a = this === null || this === void 0 ? void 0 : this._appConfig) === null || _a === void 0 ? void 0 : _a.enableBufferSearch)
                return;
            (0, watchUtils_1.once)(this.view, ["navigating", "interacting", "scale"], function () {
                var _a;
                (_a = _this === null || _this === void 0 ? void 0 : _this._mapButton) === null || _a === void 0 ? void 0 : _a.classList.remove("hide");
            });
            (_b = this === null || this === void 0 ? void 0 : this._mapButton) === null || _b === void 0 ? void 0 : _b.classList.add("hide");
        };
        LocationApp.prototype._updateMapVisibility = function (config) {
            // Hide the map when it is configured to display
            // without a map option
            var hide = config.hideMap;
            var hideMapClass = "no-map";
            var mapClassList = document.body.classList;
            hide ? mapClassList.add(hideMapClass) : mapClassList.remove(hideMapClass);
        };
        LocationApp.prototype._cleanUpHandles = function () {
            // Remove configuration handles after load
            // if the app isn't within the config experience.
            if (!this._appConfig.withinConfigurationExperience) {
                this._handles.remove("configuration");
            }
        };
        LocationApp.prototype._setMapViewRotation = function () {
            var _a, _b, _c, _d, _e;
            var view = this.view;
            var mapRotation = (_d = (_c = (_b = (_a = this._appConfig) === null || _a === void 0 ? void 0 : _a.extentSelectorConfig) === null || _b === void 0 ? void 0 : _b.mapRotation) !== null && _c !== void 0 ? _c : this._defaultViewRotation) !== null && _d !== void 0 ? _d : null;
            if (!((_e = view === null || view === void 0 ? void 0 : view.constraints) === null || _e === void 0 ? void 0 : _e.rotationEnabled)) { // if rotation is disabled
                view.constraints.rotationEnabled = true; // set rotation to enabled
                view.rotation = mapRotation; // set rotation value
                view.constraints.rotationEnabled = false; // set rotation back to disabled
            }
            else {
                if (view)
                    view.rotation = mapRotation;
            }
        };
        return LocationApp;
    }());
    return LocationApp;
});
