(function ($) {
    var old_ajax = $.ajax;

    // The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0.
    // You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead.
    $.ajax = function () {
        var x = old_ajax.apply(this, arguments);

        x.success = x.success || x.done;
        x.error = x.error || x.fail;
        x.complete = x.complete || x.always;

        return x;
    };
})(jQuery);

var atlantisjs = {};

(function ($)
{
    $.root = $(document);

    var last_confirm;
    var loaded_javascripts = {};
    var loaded_stylesheets = {};

    /*
     Deprecation Notice: The jqXHR.success(), jqXHR.error(), and jqXHR.complete() callbacks are removed as of jQuery 3.0.
     You can use jqXHR.done(), jqXHR.fail(), and jqXHR.always() instead.
     */

    $.root.ready(function ()
    {
        // add data attributes to the whitelist, since these are sanitised by default in version 3.4+
        // https://getbootstrap.com/docs/4.3/getting-started/javascript/#sanitizer
        var myDefaultWhiteList;

        if ($.fn.popover.Constructor.hasOwnProperty('Default'))
            myDefaultWhiteList = $.fn.popover.Constructor.Default.whiteList;
        else
            myDefaultWhiteList = $.fn.popover.Constructor.DEFAULTS.whiteList;

        var myCustomRegex = /^data-[\w-]+/;
        myDefaultWhiteList['*'].push(myCustomRegex);

        atlantisjs.configuration = globalconfiguration;
        atlantisjs.is_publieksomgeving = window.location.href.toLowerCase().indexOf(atlantisjs.configuration.live_url.toLowerCase()) === 0;
        
        $.root.find('body').addClass('js-enabled');

        $.root.delegate('a.confirm-remove', 'click', function (e)
        {
            last_confirm = confirm("Weet je zeker dat je dit item wilt verwijderen?");

            if (!last_confirm)
                e.preventDefault();
        });

        $.root.delegate('a.ajax-link', 'click', function (e)
        {
            var current = $(this);

            if (current.hasClass('confirm-remove') && !last_confirm)
                return false;

            var options = { url: current.attr('href'), type: 'post', async: true };

            if (current.attr('data-callback-success') != undefined)
                options['success'] = eval(current.attr('data-callback-success'));
            else if (current.attr('data-callback-success-containment') != undefined)
                options['success'] = function (response) { $.root.find('#' + current.attr('data-callback-success-containment')).html(response['html']) };

            $.ajax(options);
            e.preventDefault();
        });

        $.root.delegate('a.print-section', 'click', function (e)
        {
            atlantisjs.print_section(atlantisjs.get_url_hash($(this).attr('href')));
            e.preventDefault();
        });

        $.root.find('script[src!=""]').each(function ()
        {
            var src = $(this).attr('src');

            if (src != undefined)
                loaded_javascripts[src] = true;
        });

        $.root.find('link[rel="stylesheet"]').each(function ()
        {
            var href = $(this).attr('href');

            if (href != undefined)
                loaded_stylesheets[href] = true;
        });

        //rel noopener noreferrer op alle externe links ten behoeve van CSRF Token Leakage Through HTTP GET.
        $.root.find('a').each(function () {
            var url = $(this).attr('href');
            var external = atlantisjs.isExternal(url);

            if (external)
                $(this).attr('rel', 'noopener noreferrer');
        });

        $.root.find('form.show-loading').submit(function ()
        {
            atlantisjs.start_loading();
        });

        $.root.on('click', 'a.show-loading', function ()
        {
            atlantisjs.start_loading();
        });

        // when the debug log is shown, DO NOT UPDATE SCROLL POSITION.
        try {
            (function (old_position) {
                $.colorbox.position = function (speed) {
                    var y = window.scrollY;
                    old_position.apply($.colorbox, arguments);
                    setTimeout(function () {
                        var $div = $('.debug-log-i ~ div:visible');
                        if ($div.length) {
                            window.scrollTo(0, y);
                        }
                    }, speed);
                };
            })($.colorbox.position);
        } catch (e) {

        }

        $.root.on('click', 'a.debug-log-i', function (e)
        {
            e.preventDefault();

            $(this).next().slideToggle(function ()
            {
                $.colorbox.resize({ transition: 'none' });
            });
        });

        $.root.on('click', '.debug-log-short-params', function () {
            $(this).css('display', 'none').next().css('display', 'block').parent().css('display', 'block');
            $.colorbox.resize({ transition: 'none' });
        });

        $.root.on('click', '.debug-log-long-params', function () {
            $(this).css('display', 'none').prev().css('display', 'inline-block').parent().css('display', 'inline-block');
            $.colorbox.resize({ transition: 'none' });
        });

        if (globalconfiguration.statistieken_enabled) {
            $.root.on('click', 'a[href][data-statistic]', function (e) {
                var $link = $(this),
                    statistic = $link.data('statistic'),
                    statistic_status = $link.attr('data-statistic-status') || 'unposted'
                    ;


                if (typeof statistic === 'string') {
                    try {
                        var decoded = atob(statistic);
                        if (typeof decoded === 'string') {
                            decoded = JSON.parse(decoded);
                        }
                        if (typeof decoded === 'object') {
                            statistic = decoded;
                        }
                    } catch (e) {
                        console.warn(e);
                    }
                }

                /*
                    console.log('click a[href][data-statistic]', {
                        statistic_status: statistic_status,
                        statistic: statistic,
                        type: typeof statistic
                    });
                    */

                if (typeof statistic === 'object' && statistic_status === 'unposted') {
                    e.preventDefault();
                    $link.attr('data-statistic-status', 'posting');

                    /*
                    console.log('click a[href][data-statistic]', {
                        statistic_status: 'posting',
                        statistic: statistic
                    });
                    */

                    $.ajax({
                        type: 'POST',
                        url: globalconfiguration.datasource_url + 'AtlantisPubliek/Statistic',
                        data: JSON.stringify(statistic),
                        contentType: 'application/json',
                        dataType: 'json'
                    })
                        .always(function (response, a, b) {
                            // it was posted.
                            $link.attr('data-statistic-status', 'posted');
                            /*
                            console.log('click a[href][data-statistic]', {
                                statistic_status: 'posted',
                                statistic: statistic,
                                response: response,
                                a: a,
                                b: b
                            });
                            */
                            e.target.click();

                            $link.removeAttr('data-statistic-status');

                            /*
                            console.log('a[href][data-statistic]', { statistic: statistic, statistic_status: 'unposted' });
                            */
                        });
                }
            });
        }

        // $('.more').one('click', showmore);
        $.root.one('click', '.more', atlantisjs.showmore);

        $(window).keypress(function (event)
        {
            // start / stop met loggen van webservice communicatie
            if (event.ctrlKey && event.shiftKey && (event.which == 21 || event.key == "u"))
            {
                atlantisjs.start_loading();

                $.ajax({
                    url: 'index.php?form-action=toggle_logging', type: 'post', async: true, success: function (response)
                    {
                        $.root.find('body').removeClass('loading');

                        alert('Logfile ' + (response == 'true' ? 'aan' : 'uit'));
                    }
                });
            }

            if (event.ctrlKey && event.shiftKey && (event.which == 11 || event.key == "k"))
            {
                $.ajax({
                    url: 'index.php?form-action=show_log', type: 'post', async: true, success: function (response)
                    {
                        if (response != '')
                            $.colorbox({ html: response });
                    }
                });
            }

            // CTRL-I
            if(event.ctrlKey && event.which == 9)
            {
                var params = atlantisjs.get_url_params_recursive();
                params['form-action'] = 'show_navigation';
                $.get((atlantisjs.base_url || '/') + 'index.php', params)
                    .then(function (response) {
                        if (response !== '' && typeof response === 'string') {
                            $.colorbox({
                                height: window.innerHeight - 100,
                                width: Math.min(900, window.innerWidth - 100),
                                html: response
                            });
                        }
                    });
            }
        });

        let timeout = $(".alert").attr('data-timeout');
        if (parseInt(timeout) > 0)
        {
            $(".alert").fadeTo(parseInt(timeout), 1).slideUp(500);
        }
    });

	//Gaat voor iedere ajax call af: before each request is sent and before they are processed by $.ajax().
	//Cross-Site Request Forgery protection (CSRF/XSRF). unique_token wordt weer uitgelezen in configuration.php.
    $.ajaxPrefilter(function (options, originalOptions, xhr)
    {
        const unique_tokenValue = $('.unique-token').first().val();

        try {
            const url = new URL(options.url).host;
            const baseUrl = new URL(atlantisjs.base_url).host;

            if (url.indexOf(baseUrl) === -1) {
                return;
            }

            xhr.setRequestHeader("Unique-Token", unique_tokenValue);
        } catch {
            xhr.setRequestHeader("Unique-Token", unique_tokenValue);
        }
    });

    atlantisjs.base_url = (function () {
        var src;
        if ('currentScript' in document) {
            src = document.currentScript.src;
        } else {
            var scripts = document.getElementsByTagName('script');
            src = scripts[scripts.length - 1].src;
        }
        return src.split('/files/javascripts/').shift() + '/';
    })();

    atlantisjs.checkDomain = function (url) {
        if (url.indexOf('//') === 0) { url = location.protocol + url; }
        return url.toLowerCase().replace(/([a-z])?:\/\//, '$1').split('/')[0];
    };

    atlantisjs.isExternal = function (url) {
        return (url != undefined && !url.startsWith('#') && (url.indexOf(':') > -1 || url.indexOf('//') > -1) && atlantisjs.checkDomain(location.href) !== atlantisjs.checkDomain(url));
    };

    atlantisjs.resolve_ajax_url = function (url) {
        if (url.indexOf('://') > -1) {
            return url;
        }
        return location.protocol + '//' + location.host + url;
    };

    atlantisjs.load_js_file_if_not = function ( check, url, callback) {
        var p = $.Deferred();

        if (callback) {
            p.done(callback);
        }
        //console.log('load_js_file_if_not:', check, url, callback);

        if (check) {
            //console.log('load_js_file_if_not: already loaded', url);
            p.resolve();
        } else {
            //console.log('load_js_file_if_not: loading', url);
            $.ajax({
                datatype: 'script',
                cache: true,
                url: url
            })
                .done(function () {
                    //console.log('load_js_file_if_not: loaded', url);
                    p.resolve();
                })
                .error(function () {
                    p.reject();
                });
        }
        return p;
    };

    atlantisjs.load_ajax_js = function(javascripts)
    {
        if (javascripts == undefined)
            return $.when();

        var setup = $.ajaxSetup();
        $.ajaxSetup({ async: true });

        var promises = [];

        for (let i = 0; i < javascripts.length; i++)
        {
            // SRI not supported yet :(
            var url = javascripts[i];
            if(typeof url === 'object' && url.hasOwnProperty('javascript'))
            {
                url = url.javascript;
            }
            url = atlantisjs.resolve_ajax_url(url);

            if (typeof loaded_javascripts[url] === 'undefined')
            {
                promises.push($.getScript(url)
                .fail(function (jqxhr, settings, exception)
                {
                    console.error(exception);
                }));

                loaded_javascripts[url] = true;
            }
        }
        
        $.ajaxSetup(setup);

        return $.when.apply($, promises);
    };

    atlantisjs.load_ajax_css = function(stylesheets)
    {
        if (stylesheets == undefined)
            return $.when();

        var promises = [];

        for (let i = 0; i < stylesheets.length; i++){
            // SRI check
            var url = stylesheets[i], sri;
            if(typeof url === 'object' && url.hasOwnProperty('stylesheet'))
            {
                url = url.stylesheet;
                sri = url.sri;
            }
            url = atlantisjs.resolve_ajax_url(url);

            if (typeof loaded_stylesheets[url] === 'undefined') {
                var promise = $.Deferred();



                var link = document.createElement('link');

                link.rel = 'stylesheet';
                link.type = 'text/css';

                if( typeof sri === 'string') {
                    link.setAttribute('sri', sri);
                }


                var enableStylesheet = function (e) {
                    if (globalconfiguration.debugging) {
                        console.log('loaded', e.target.href);
                    }

                    e.target.removeAttribute('media');
                    promise.resolve();
                };



                if( link.addEventListener ){
                    link.addEventListener( "load", enableStylesheet );
                    link.addEventListener( "error", enableStylesheet );
                } else if( link.attachEvent ){
                    link.attachEvent( "onload", enableStylesheet );
                    link.attachEvent( "onerror", enableStylesheet );
                } else {
                    link.onload = enableStylesheet;
                    link.onerror = enableStylesheet;
                }


                link.href = url;


                $('head').prepend(link);

                link.media = 'only x';

                promises.push(promise);

                loaded_stylesheets[url] = true;
            }
        }

        return $.when.apply($, promises);
    };

    atlantisjs.get_url_hash = function(url)
    {
        if (url == undefined)
            return '';

        if (url.indexOf('#') < 0)
            return url;

        if (url.substring(0, 1) == '#')
            return url.substring(1);

        url = url.split("#");

        return url[1];
    };

    atlantisjs.get_url_params = function(params)
    {
        var params_array = {};

        if (params == '')
            return params_array;

        var params = atlantisjs.get_url_hash(params).split('&');

        for (let i = 0; i < params.length; i++)
        {
            var key_value = params[i].split('=');
            params_array[key_value[0]] = key_value[1];
        }

        return params_array;
    };

    // ondersteund subniveaus. $.deparam alternatief
	atlantisjs.get_url_params_recursive = function (query, plus_to_20) {

		if (arguments.length < 2) {
			if (query === true || query === false) {
				plus_to_20 = query;
				query = window.location;
			} else {
				plus_to_20 = true;
			}
		}

		if (query instanceof Location) {
			query = query.search;
		}
		if (typeof query === 'undefined') {
			query = window.location.search;
		}
		if (typeof query !== 'string') {
			throw 'expecting string or Location object';
		}

		query = query.split('?').pop();
		query = query.split('#').shift();

        if('deparam' in jQuery)
        {
            return jQuery.deparam(query);
        }

        var setValue = function (root, path, value) {
            if (path.length > 1) {
                var dir = path.shift();
                if (typeof root[dir] == 'undefined') {
                    root[dir] = path[0] == '' ? [] : {};
                }

                arguments.callee(root[dir], path, value);
            } else {
                if (root instanceof Array) {
                    root.push(value);
                } else {
                    root[path] = value;
                }
            }
        };

        var nvp = query.split('&');
        var data = {};
        for (var i = 0; i < nvp.length; i++) {
			if (nvp[i].indexOf('=') > 0) {
				var pair = nvp[i];
				if (plus_to_20)
					pair = pair.replace(/\+/g, '%20');
				pair = pair.split('=');
                var name = decodeURIComponent(pair[0]);
				var value = decodeURIComponent(pair[1]);

                var path = name.match(/(^[^\[]+)(\[.*\]$)?/);
                var first = path[1];
                if (path[2]) {
                    //case of 'array[level1]' || 'array[level1][level2]'
                    path = path[2].match(/(?=\[(.*)\]$)/)[1].split('][')
                } else {
                    //case of 'name'
                    path = [];
                }
                path.unshift(first);

                setValue(data, path, value);
            }
        }
        return data;
    };

    atlantisjs.setCookie = function(c_name, value, expiredays)
    {
        var exdate = new Date();

        exdate.setDate(exdate.getDate() + expiredays);

        document.cookie = c_name + "=" + escape(value) + (expiredays == null ? "" : "; expires=" + exdate.toGMTString()) + "; path=/";
    };

    atlantisjs.getCookie = function(c_name)
    {
        if (document.cookie.length > 0)
        {
            c_start = document.cookie.indexOf(c_name + "=");

            if (c_start != -1)
            {
                c_start = c_start + c_name.length + 1;
                c_end = document.cookie.indexOf(";", c_start);

                if (c_end == -1)
                    c_end = document.cookie.length;

                return unescape(document.cookie.substring(c_start, c_end));
            }
        }

        return false;
    };

    atlantisjs.storeLocal = function(name, value, expiredays)
    {
        var exdate = new Date();

        exdate.setDate(exdate.getDate() + expiredays);

        localStorage[name] = JSON.stringify({ 'expires': exdate.getTime(), 'value': value });
    };

    atlantisjs.getLocalStorage = function(name)
    {
        if (localStorage[name] == undefined)
            return '';

        eval('var storage = ' + localStorage[name]);

        if (storage['expires'] < new Date().getTime())
        {
            delete localStorage[name];

            return '';
        }

        return storage['value'];
    };

    atlantisjs.print_section = function(element_id)
    {
        $('#printable_frame').remove();

        var iframe = document.createElement('IFRAME');
        var doc = null;

        $(iframe).attr('style', 'position:absolute;width:0px;height:0px;left:-500px;top:-500px;').attr('id', 'printable_frame');
        document.body.appendChild(iframe);

        doc = iframe.contentWindow.document;
        var links = window.document.getElementsByTagName('link');

        doc.write('<html><head>');

        for (var i = 0; i < links.length; i++)
            if (links[i].rel.toLowerCase() == 'stylesheet')
                doc.write('<link type="text/css" rel="stylesheet" href="' + links[i].href + '"></link>');

        doc.write('</head><body><div id="' + element_id + '" class="print-version">' + $.root.find('#' + element_id).html() + '</div></body></html>');
        doc.close();
        $('body, html', iframe).css('background-color', '#fff');
        iframe.contentWindow.focus();
        iframe.contentWindow.print();
    };

    atlantisjs.supports_input_placeholder = function()
    {
        var i = document.createElement('input');

        return 'placeholder' in i;
    };

    atlantisjs.start_loading = function()
    {
        $.root.find('body').addClass('loading');
    };

    atlantisjs.stop_loading = function()
    {
        $.root.find('body').removeClass('loading');
    };

    atlantisjs.showmore = function showmore()
    {
        $(this).text("lees minder").siblings(".complete").show();
        $(this).siblings(".teaser").hide();
        $(this).one('click', atlantisjs.showless);
    };

    atlantisjs.showless = function showless()
    {
        $(this).text("... lees meer").siblings(".complete").hide();
        $(this).siblings(".teaser").show();
        $(this).one('click', atlantisjs.showmore);
    };

    atlantisjs.is_desktop = function()
    {
        if (navigator.userAgent.match(/iPad/i) != null)
            return false;

        var a = (navigator.userAgent || navigator.vendor || window.opera);

        return ((/android.+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|meego.+mobile|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) == false);
    };

    atlantisjs.loading_img_html = '<img src="' + (atlantisjs.base_url || '/') + 'files/images/loading.gif' + '" alt="Tekstvelden zijn aan het laden." />';

    atlantisjs.ScrollDimensionsSender = (function () {

        // private function.
        var postHeightToParent = function (height) {
                // targetOrigin = *, can be embedded anywhere.
                // todo: targetOrigin vervangen met origin uit server sessiondata?
                parent.postMessage('atlantis_scroll_height_' + height, '*');
            },
            ScrollDimensionsSender = function ScrollDimensionsSender() {
                this.height = 0;
                this.scroll_element = document.scrollingElement || document.documentElement || document.getElementsByName('html')[0];

                jQuery(function ($) {

                    this.onScrollElementResize();
                    this.modifyLinksInNode(this.scroll_element);

                    if('MutationObserver' in window && typeof MutationObserver === 'function'){
                        var mutation_observer = new MutationObserver(this.onScrollElementMutated.bind(this));
                        mutation_observer.observe(this.scroll_element, {
                            childList:true,
                            subtree:true
                        });
                    }

                    if('ResizeObserver' in window && typeof window.ResizeObserver === 'function') {
                        var resize_observer = new ResizeObserver(this.onScrollElementResize.bind(this));
                        resize_observer.observe(this.scroll_element);
                    } else {
                        setTimeout(this.onScrollElementResize.bind(this), 1500);
                    }

                    $(window).on('beforeunload', function(e){
                        // Toon een spinner als men de pagina verlaat.
                        // Anders denkt de bezoeker dat er helemaal niets gebeurt.
                        atlantisjs.start_loading();
                        postHeightToParent(250);
                    });
                }.bind(this));

            },
            proto = ScrollDimensionsSender.prototype;

        /**
         *
         * @param {string|Location|HTMLAnchorElement} search
         * @returns {boolean|{i: number, id: number}}
         */
        proto.getNavIdFromSearch = function getNavIdFromSearch(search)
        {
            if(search instanceof Location || search instanceof HTMLAnchorElement){
                search = search.search.toString();
            }
            if(typeof search !== 'string' && typeof search.toString === 'function') {
                search = search.toString();
            }
            if(typeof search !== 'string')
            {
                return false;
            }

            var match = search.match(/(?:^\?|&)nav_id=(\d+)-(\d+)/);
            if(match)
            {
                return {
                    id: Number(match[1]),
                    i: Number(match[2])
                };
            }
            return false;
        };

        /**
         * @param {string|Location|HTMLAnchorElement} hostname
         * @returns {string|boolean}
         */
        proto.getMainDomainFromHostname = function getMainDomainFromLinkOrLocation(hostname)
        {
            if(hostname instanceof Location || hostname instanceof HTMLAnchorElement) {
                hostname = "" + hostname.hostname.toString();
            }
            if(typeof hostname !== 'string' || hostname.length === 0) {
                return false;
            }

            // test.a.b.nl wordt b.nl. slice(-2) = laatste twee array values.
            return hostname.split('.').slice(-2).join('.');
        };

        /**
         * Is het hetzelfde hoofddomein?
         *
         * @param {string|Location|HTMLAnchorElement} a
         * @param {string|Location|HTMLAnchorElement} b
         *
         * @returns {boolean}
         */
        proto.isSameMainDomain = function isSameMainDomain(a, b)
        {
            var
                domain_a = this.getMainDomainFromHostname(a),
                domain_b = this.getMainDomainFromHostname(b);

            return domain_a !== false && domain_a === domain_b;
        };

        /**
         * Navigatie vergelijken.
         *
         * @param {string|Location|HTMLAnchorElement} waarde a
         * @param {string|Location|HTMLAnchorElement} waarde b
         * @param {boolean|null} exact_nav_id Maakt tweede cijfer verplicht om hetzelfde te zijn.
         * @returns {boolean}
         */
        proto.isInSameNavigation = function isInSameNavigation(a, b, exact_nav_id) {
            var nav_a = this.getNavIdFromSearch(a),
                nav_b = this.getNavIdFromSearch(b);

            if(typeof exact_nav_id === 'undefined')
            {
                exact_nav_id = false;
            }

            if(nav_a === false|| nav_b === false)
            {
                return false;
            }

            if(nav_a.id !== nav_b.id) {
                return false;
            }

            return !exact_nav_id || nav_a.i === nav_b.i;
        };

        /**
         * Hyperlink aanpassen zodat het een iframe ontsnapt.
         *
         * Wordt uiteindelijk aangeroepen door de mutationobserver.
         *
         * @param {HTMLAnchorElement} link
         */
        proto.modifyLink = function modifyLink(link)
        {
            if(!link.hasAttribute('href')) return;

            // window.current_url wordt door php ingesteld zodat permanente urls goed werken op de resultatenpagina (dan is er geen nav_id)
            var
                current_url = window.current_url || window.location,
                current_target = link.hasAttribute('target')
                    ? link.getAttribute('target')
                    // todo: controle op base target, dus in <head>: <base target="_self">
                    : '_self'
                ;

            if(!this.isInSameNavigation(current_url, link, false))
            {
                /**
                 * Alleen aanpassen als de link in huidige frame geopend zal worden.
                 */
                if(current_target === '_self')
                {
                    // hoeft geen nieuwe tab te zijn. Zelfde domein of subdomein 
                    if(this.isSameMainDomain(window.location, link))
                    {
                        link.target = '_parent';
                    }
                    else
                    {
                        link.target = '_blank';
                        link.setAttribute('rel', 'noopener');
                    }
                    // CSS Klasse toevoegen
                    link.setAttribute('class', (link.hasAttribute('class')
                            ? link.getAttribute('class')
                            : ''
                    ) + ' iframe-escape');
                }
            } else {
                /**
                 * Is link naar pagina met nav_id, juiste embedded flag instellen.
                 */
                var m = link.search.match(/(^\?|&)embedded=(true|false)(&|$)/),
                    href = link.getAttribute('href'),
                    embedded = current_target === '_self' ? 'true' : 'false'
                ;

                if (!m || !m.length) {
                    //console.log('embedded missing', href);
                    link.setAttribute('href', href + (
                        link.search === ''
                            ? '?'
                            : '&'
                    ) + 'embedded=' + embedded);
                } else if(m[2] !== embedded) {
                    //console.log('embedded wrong', href);
                    link.setAttribute('href', href.replace(m[0], m[1] + 'embedded=' + embedded + m[3]));
                }
            }
        };

        /**
         * Past de links aan binnen een node.
         * @param {HTMLElement} node
         */
        proto.modifyLinksInNode = function modifyLinksInNode(node)  {
            var i = 0, links = node.getElementsByTagName('a');
            while (i < links.length)
            {
                this.modifyLink(links[i]);
                i++;
            }
        };

        /**
         * Mutaties controleren op toegevoegde hyperlinks
         * en dan target aanpassen.
         * @param {Array.<MutationRecord>} mutations
         */
        proto.onScrollElementMutated = function (mutations) {
            var i = 0, j = 0, mutation, childNode;
            while(i < mutations.length) {
                mutation = mutations[i];
                if(mutation.type === 'childList') {
                    j = 0;
                    while(j < mutation.addedNodes.length) {
                        childNode = mutation.addedNodes[j];
                        if(childNode instanceof HTMLAnchorElement) {
                            this.modifyLink(childNode);
                        } else if (childNode in HTMLElement) {
                            this.modifyLinksInNode(childNode);
                        }
                        j++;
                    }
                }
                i ++;
            }
        };

        /**
         * Doorgeven van scroll hoogte van iframe aan parent.
         *
         * Verbergt de scrollbar tijdelijk om ervoor te zorgen dat de scrollbar altijd uit staat.
         * Beter voor toegankelijkheid dan het totaal verbergen van scrollbars.
         */
        proto.onScrollElementResize = function () {
            var updated,
                current_overflow = this.scroll_element.style.overflow,
                current_height, scroll_height, offset_height
                ;

            this.scroll_element.style.overflow = 'hidden';

            // Mogelijk tweaken als er bugs optreden
            offset_height = this.scroll_element.offsetHeight;
            scroll_height = this.scroll_element.scrollHeight;
            current_height = offset_height < scroll_height
                ? offset_height
                : scroll_height;

            if (current_height !== this.height) {
                this.height = current_height;
                updated = true;
            }

            this.scroll_element.style.overflow = current_overflow;

            if(updated) {
                postHeightToParent(current_height);
            }
        };

        return ScrollDimensionsSender;
    })();

    $.root.ready(function () {
        if (window.self !== window.top) {
            new atlantisjs.ScrollDimensionsSender();
            // shown.bs.modal/hidden.bs.modal dont seem to trigger when modal is in iframe...
            setInterval(function () {
                parent.postMessage('modal_open=' + ($('.modal.show').length ? 1 : 0), '*');
            }, 1000 / 6);
        }

        else if ($('body.iframe').length) {
            /**
             * Als een gebruiker een pagina opvraagt waar de ehader en footer weg zijn,
             * en zonder iframe (window.self === window.top)
             * dan de gebruiker doorsturen zodat hij/zij toch de header en footer kan krijgen.
             */
            var url = location.toString() + (location.search === '' ? '?' : '&') + 'embedded=false';
            location = url;
        }
    });


    $(document).on('click', 'a[href].bootbox-iframe, a[href][data-modal-title]', function (e) {
        e.preventDefault();
        let alert = bootbox.alert({
            title: $(this).data('modal-title'),
            locale: 'nl',
            message: '<iframe class="iframebootbox__iframe" width="150" height="150" src="${url}">Uw browser ondersteund geen iframes.</iframe>'.replace('${url}', this.href + '&within-iframe=1'),
            className: 'iframebootbox__modal'
        });
    });

    // keyboard trap for bootstrap modal.
    $(document).on('keydown', '.modal *', function (e) {
        var isTabPressed = e.key === 'Tab' || e.keyCode === 9,
            $this, $focusableElements, $firstFocusableElement, $lastFocusableElement, $modal
        ;

        if (!isTabPressed) {
            return;
        }
        $this = $(this);
        if(!$this.is('.modal *')) {
            return;
        }

        $modal = $this.closest('.modal');

        $focusableElements = $modal
            .find('a[href], area[href], input, select, textarea, button, iframe, object, embed, *[tabindex], *[contenteditable]')
            .not('[tabindex=-1], [disabled], :hidden')
            .filter(function (k, element) {
                return element instanceof HTMLElement && typeof element.focus === 'function';
            });
        $firstFocusableElement = $focusableElements.first();
        $lastFocusableElement = $focusableElements.last()


        if (e.shiftKey) {
            // if shift key pressed for shift + tab combination
            if ($firstFocusableElement.is(document.activeElement)) {
                // add focus for the last focusable element
                $lastFocusableElement.focus();
                e.preventDefault();
                //console.log('focus on', {$lastFocusableElement});
            } else {
                //console.log('shift-tab', {e, $firstFocusableElement, $lastFocusableElement});
            }
        } else {
            // if tab key is pressed
            if ($lastFocusableElement.is(document.activeElement)) {
                // if focused has reached to last focusable element then focus first focusable element after pressing tab
                // add focus for the first focusable element
                $firstFocusableElement.focus();
                e.preventDefault();
                //console.log('focus on', {$firstFocusableElement});
            } else {
                //console.log('tab', {e, $firstFocusableElement, $lastFocusableElement});
            }
        }

    });


})(jQuery);