(function (Drupal) {
  var wait = 500;

  function setMailplusEmailFieldPlaceholderAndType(context) {
    var input = context.querySelector(
      '.mailplus-form-container form input#field1521'
    );

    if (!input) {
      // Wait for MailPlus is being loaded.
      setTimeout(setMailplusEmailFieldPlaceholderAndType, wait, context);
      wait *= 2;
      return;
    }

    input.setAttribute('type', 'email');
    input.setAttribute('placeholder', 'E-mailadres');

    var all_inputs = context.querySelectorAll(
        '.mailplus-form-container form input'
      ),
      i = all_inputs.length;

    while (i--) {
      all_inputs[i].style.borderRadius = '0px';
    }
  }

  Drupal.behaviors.newsletter_block_mailplus = {
    attach: function (context) {
      setMailplusEmailFieldPlaceholderAndType(context);
    }
  };
})(Drupal);
;
(function (Drupal) {
  var popup = null,
    lastClickedBlock = null;

  function closePopup() {
    var blocks = document.querySelectorAll(
      '.paragraph--type--bouwstenen .bouwsteen-content'
    );
    if (popup) {
      popup.parentNode.removeChild(popup);
      popup = null;
    }
    blocks.forEach(function (block) {
      block.classList.remove('popup-open');
    });
  }

  function repositionPopup() {
    if (!popup) {
      return;
    }

    var rect = popup.anchorElement.getBoundingClientRect();
    popup.style.left =
      rect.left + rect.width / 2 - popup.offsetWidth / 2 + 'px';
    popup.style.top =
      rect.top - (popup.offsetHeight + 12) + window.scrollY + 'px';
  }

  function blockOnClick(e) {
    e.preventDefault();
    closePopup();

    if (lastClickedBlock === this) {
      lastClickedBlock = null;
      return;
    }
    lastClickedBlock = this;

    popup = this.querySelector('.bouwsteen-content-popup');

    if (!popup) {
      return;
    }

    var browserIsIE =
      navigator.userAgent.toUpperCase().indexOf('TRIDENT/') != -1 ||
      navigator.userAgent.toUpperCase().indexOf('MSIE') != -1;

    if (browserIsIE || (window.innerWidth && window.innerWidth < 640)) {
      // IE11 or mobile, do not show popup but go to page.
      window.location.href = popup.querySelector('a').getAttribute('href');
      popup = null;
      return;
    }

    window.allowShowHideMenu = false;

    this.classList.add('popup-open');
    popup = popup.cloneNode(true);
    document.body.appendChild(popup);
    popup.className = 'bouwsteen-popup';
    popup.anchorElement = this;
    repositionPopup();
    popup.scrollIntoView();
    setTimeout(function () {
      window.allowShowHideMenu = true;
      window.hideMenu();
    }, 500);
  }

  function bodyOnClick(e) {
    var target = e.target;

    while (target) {
      if (
        target.classList &&
        (target.classList.contains('bouwsteen-content') ||
          target.classList.contains('bouwsteen-popup'))
      ) {
        return;
      }
      target = target.parentNode;
    }
    closePopup();
  }

  Drupal.behaviors.framework_paragraph_bouwstenen = {
    attach: function (context, settings) {
      var blocks = context.querySelectorAll(
          '.paragraph--type--bouwstenen .bouwsteen-content'
        ),
        i = blocks.length;

      while (i--) {
        blocks[i].addEventListener('click', blockOnClick);
      }

      document.body.addEventListener('click', bodyOnClick);
      window.addEventListener('resize', repositionPopup);
    }
  };
})(Drupal);
;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, once) {
  var deprecatedMessageSuffix = "is deprecated in Drupal 9.3.0 and will be removed in Drupal 10.0.0. Use the core/once library instead. See https://www.drupal.org/node/3158256";
  var originalJQOnce = $.fn.once;
  var originalJQRemoveOnce = $.fn.removeOnce;

  $.fn.once = function jQueryOnce(id) {
    Drupal.deprecationError({
      message: "jQuery.once() ".concat(deprecatedMessageSuffix)
    });
    return originalJQOnce.apply(this, [id]);
  };

  $.fn.removeOnce = function jQueryRemoveOnce(id) {
    Drupal.deprecationError({
      message: "jQuery.removeOnce() ".concat(deprecatedMessageSuffix)
    });
    return originalJQRemoveOnce.apply(this, [id]);
  };

  var drupalOnce = once;

  function augmentedOnce(id, selector, context) {
    originalJQOnce.apply($(selector, context), [id]);
    return drupalOnce(id, selector, context);
  }

  function remove(id, selector, context) {
    originalJQRemoveOnce.apply($(selector, context), [id]);
    return drupalOnce.remove(id, selector, context);
  }

  window.once = Object.assign(augmentedOnce, drupalOnce, {
    remove: remove
  });
})(jQuery, once);;
/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal) {
  function DropButton(dropbutton, settings) {
    var options = $.extend({
      title: Drupal.t('List additional actions')
    }, settings);
    var $dropbutton = $(dropbutton);
    this.$dropbutton = $dropbutton;
    this.$list = $dropbutton.find('.dropbutton');
    this.$actions = this.$list.find('li').addClass('dropbutton-action');

    if (this.$actions.length > 1) {
      var $primary = this.$actions.slice(0, 1);
      var $secondary = this.$actions.slice(1);
      $secondary.addClass('secondary-action');
      $primary.after(Drupal.theme('dropbuttonToggle', options));
      this.$dropbutton.addClass('dropbutton-multiple').on({
        'mouseleave.dropbutton': $.proxy(this.hoverOut, this),
        'mouseenter.dropbutton': $.proxy(this.hoverIn, this),
        'focusout.dropbutton': $.proxy(this.focusOut, this),
        'focusin.dropbutton': $.proxy(this.focusIn, this)
      });
    } else {
      this.$dropbutton.addClass('dropbutton-single');
    }
  }

  function dropbuttonClickHandler(e) {
    e.preventDefault();
    $(e.target).closest('.dropbutton-wrapper').toggleClass('open');
  }

  Drupal.behaviors.dropButton = {
    attach: function attach(context, settings) {
      var dropbuttons = once('dropbutton', '.dropbutton-wrapper', context);

      if (dropbuttons.length) {
        var body = once('dropbutton-click', 'body');

        if (body.length) {
          $(body).on('click', '.dropbutton-toggle', dropbuttonClickHandler);
        }

        dropbuttons.forEach(function (dropbutton) {
          DropButton.dropbuttons.push(new DropButton(dropbutton, settings.dropbutton));
        });
      }
    }
  };
  $.extend(DropButton, {
    dropbuttons: []
  });
  $.extend(DropButton.prototype, {
    toggle: function toggle(show) {
      var isBool = typeof show === 'boolean';
      show = isBool ? show : !this.$dropbutton.hasClass('open');
      this.$dropbutton.toggleClass('open', show);
    },
    hoverIn: function hoverIn() {
      if (this.timerID) {
        window.clearTimeout(this.timerID);
      }
    },
    hoverOut: function hoverOut() {
      this.timerID = window.setTimeout($.proxy(this, 'close'), 500);
    },
    open: function open() {
      this.toggle(true);
    },
    close: function close() {
      this.toggle(false);
    },
    focusOut: function focusOut(e) {
      this.hoverOut.call(this, e);
    },
    focusIn: function focusIn(e) {
      this.hoverIn.call(this, e);
    }
  });
  $.extend(Drupal.theme, {
    dropbuttonToggle: function dropbuttonToggle(options) {
      return "<li class=\"dropbutton-toggle\"><button type=\"button\"><span class=\"dropbutton-arrow\"><span class=\"visually-hidden\">".concat(options.title, "</span></span></button></li>");
    }
  });
  Drupal.DropButton = DropButton;
})(jQuery, Drupal);;
