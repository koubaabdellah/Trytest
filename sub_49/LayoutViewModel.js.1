/*
 *   Copyright (c) 2021 Esri
 *   All rights reserved.

 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at

 *   http://www.apache.org/licenses/LICENSE-2.0

 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
define(["require", "exports", "tslib", "esri/core/Accessor", "esri/core/accessorSupport/decorators", "../Error", "TemplatesCommonLib/baseClasses/support/itemUtils", "esri/core/watchUtils", "../../utils/esriWidgetUtils", "TemplatesCommonLib/structuralFunctionality/a11yUtils"], function (require, exports, tslib_1, Accessor_1, decorators_1, Error_1, itemUtils_1, watchUtils_1, esriWidgetUtils_1, a11yUtils_1) {
    "use strict";
    Accessor_1 = tslib_1.__importDefault(Accessor_1);
    Error_1 = tslib_1.__importDefault(Error_1);
    var LayoutViewModel = /** @class */ (function (_super) {
        tslib_1.__extends(LayoutViewModel, _super);
        //--------------------------------------------------------------------------
        //
        //  Lifecycle
        //
        //--------------------------------------------------------------------------
        function LayoutViewModel(props) {
            var _this = _super.call(this, props) || this;
            _this.view = null;
            return _this;
        }
        Object.defineProperty(LayoutViewModel.prototype, "state", {
            get: function () {
                var ready = this.get("view.ready");
                var loading = this.get("item.loadStatus") === "loaded" ? false : true;
                if (!this.item) {
                    return "error";
                }
                else {
                    return ready && !loading ? "ready" : "loading";
                }
            },
            enumerable: false,
            configurable: true
        });
        LayoutViewModel.prototype.createMap = function (container) {
            var _a, _b, _c, _d, _e;
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var portalItem, appProxies, defaultViewProperties, mapContainer, components, viewProperties, _f, minScale, maxScale, map, view, _g, view_1, button, ids_1, ids_2, ariadesc, rootNode, k, e_1;
                var _this = this;
                return tslib_1.__generator(this, function (_h) {
                    switch (_h.label) {
                        case 0:
                            if (!this.item) {
                                return [2 /*return*/, new Error_1.default({
                                        title: "Error",
                                        message: "Could not load an item to display",
                                        container: container
                                    })];
                            }
                            portalItem = this.applicationBase.results
                                .applicationItem.value;
                            appProxies = (portalItem === null || portalItem === void 0 ? void 0 : portalItem.applicationProxies)
                                ? portalItem.applicationProxies
                                : null;
                            defaultViewProperties = (0, itemUtils_1.getConfigViewProperties)(this.applicationConfig);
                            mapContainer = {
                                container: container
                            };
                            components = ["attribution"];
                            viewProperties = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, defaultViewProperties), { ui: { components: components } }), mapContainer);
                            _f = this.applicationConfig, minScale = _f.minScale, maxScale = _f.maxScale;
                            if (minScale || maxScale) {
                                viewProperties.constraints = {
                                    minScale: minScale !== null && minScale !== void 0 ? minScale : 0,
                                    maxScale: maxScale !== null && maxScale !== void 0 ? maxScale : 0
                                };
                            }
                            _h.label = 1;
                        case 1:
                            _h.trys.push([1, 5, , 6]);
                            return [4 /*yield*/, (0, itemUtils_1.createMapFromItem)({
                                    item: this.item,
                                    appProxies: appProxies
                                })];
                        case 2:
                            map = (_h.sent());
                            return [4 /*yield*/, (0, itemUtils_1.createView)(tslib_1.__assign(tslib_1.__assign({}, viewProperties), { map: map }))];
                        case 3:
                            view = (_h.sent());
                            _g = this;
                            return [4 /*yield*/, view.when()];
                        case 4:
                            _g.view = _h.sent();
                            if (((_a = this === null || this === void 0 ? void 0 : this.applicationConfig) === null || _a === void 0 ? void 0 : _a.magnifier) && (this === null || this === void 0 ? void 0 : this.view)) {
                                view_1 = this.view;
                                button = document.createElement("calcite-button");
                                button.appearance = "outline";
                                button.color = "neutral";
                                button.classList.add("esri-component", "esri-widget", "esri-widget--button");
                                button.iconStart = "data-magnifying-glass";
                                view_1.ui.add(button, "bottom-left");
                                view_1.magnifier.size = 280;
                                view_1.magnifier.overlayEnabled = false;
                                view_1.magnifier.maskEnabled = true;
                                view_1.magnifier.visible = false;
                                view_1.magnifier.factor = 2;
                                view_1.on("pointer-move", function (event) {
                                    var _a;
                                    if (((_a = view_1 === null || view_1 === void 0 ? void 0 : view_1.magnifier) === null || _a === void 0 ? void 0 : _a.visible) === true)
                                        view_1.magnifier.position = { x: event.x, y: event.y };
                                });
                                button.addEventListener("click", function () {
                                    view_1.magnifier.visible = !view_1.magnifier.visible;
                                });
                            }
                            //add action to popup for editing if configured 
                            (0, watchUtils_1.init)(this.applicationConfig, ["layerEditPanel", "addEditToPopup"], function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var _a, layerEditPanel, addEditToPopup, popupPanel, ActionButton, editAction_1, exists;
                                var _this = this;
                                var _b;
                                return tslib_1.__generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            _a = this.applicationConfig, layerEditPanel = _a.layerEditPanel, addEditToPopup = _a.addEditToPopup, popupPanel = _a.popupPanel;
                                            if (!(layerEditPanel && addEditToPopup && !popupPanel)) return [3 /*break*/, 2];
                                            return [4 /*yield*/, new Promise(function (resolve_1, reject_1) { require(["esri/support/actions/ActionButton"], resolve_1, reject_1); }).then(tslib_1.__importStar)];
                                        case 1:
                                            ActionButton = _c.sent();
                                            editAction_1 = new ActionButton.default({
                                                title: this.applicationConfig.appBundle.tools.edit,
                                                id: "editAction",
                                                className: "esri-icon-edit",
                                                visible: false
                                            });
                                            exists = this.view.popup.actions.find(function (e) {
                                                var val = false;
                                                if (e.id === "editAction") {
                                                    val = true;
                                                }
                                                return val;
                                            });
                                            if (!exists)
                                                this.view.popup.actions.add(editAction_1);
                                            this.view.popup.watch("selectedFeature", function (graphic) {
                                                var _a;
                                                if (graphic) {
                                                    var template = graphic.getEffectivePopupTemplate();
                                                    if (editAction_1)
                                                        editAction_1.visible = ((_a = graphic === null || graphic === void 0 ? void 0 : graphic.layer) === null || _a === void 0 ? void 0 : _a.editingEnabled) && addEditToPopup ? true : false;
                                                }
                                            });
                                            (_b = this.view.popup) === null || _b === void 0 ? void 0 : _b.viewModel.on("trigger-action", function (event) {
                                                var _a;
                                                if (event.action.id === "editAction") {
                                                    (0, esriWidgetUtils_1.switchToEditMode)(_this.view.popup.selectedFeature, (_a = _this.applicationConfig) === null || _a === void 0 ? void 0 : _a.editor, _this.view);
                                                }
                                            });
                                            return [3 /*break*/, 3];
                                        case 2:
                                            if (!layerEditPanel && !addEditToPopup && !popupPanel) {
                                                this.view.popup.actions.removeAll();
                                            }
                                            _c.label = 3;
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            }); });
                            if ((_b = this === null || this === void 0 ? void 0 : this.applicationConfig) === null || _b === void 0 ? void 0 : _b.hiddenLayers) {
                                ids_1 = this.applicationConfig.hiddenLayers.split(",");
                                (0, watchUtils_1.whenFalseOnce)(this.view, "updating", function () {
                                    _this.view.allLayerViews.forEach(function (lv) {
                                        var _a, _b;
                                        var layerId = ((_a = lv === null || lv === void 0 ? void 0 : lv.layer) === null || _a === void 0 ? void 0 : _a.id) || null;
                                        // Get default layer visiblity 
                                        var hidden = ((_b = lv === null || lv === void 0 ? void 0 : lv.layer) === null || _b === void 0 ? void 0 : _b.visible) ? false : true;
                                        hidden = ids_1.some(function (id) {
                                            if (id === layerId) {
                                                return true;
                                            }
                                        });
                                        if (lv === null || lv === void 0 ? void 0 : lv.layer) {
                                            lv.layer.visible = !hidden;
                                        }
                                    });
                                });
                            }
                            if ((_c = this === null || this === void 0 ? void 0 : this.applicationConfig) === null || _c === void 0 ? void 0 : _c.showLayers) {
                                ids_2 = this.applicationConfig.showLayers.split(",");
                                (0, watchUtils_1.whenFalseOnce)(this.view, "updating", function () {
                                    _this.view.allLayerViews.forEach(function (lv) {
                                        var _a;
                                        var layerId = ((_a = lv === null || lv === void 0 ? void 0 : lv.layer) === null || _a === void 0 ? void 0 : _a.id) || null;
                                        // Get default layer visiblity 
                                        var shown = false;
                                        shown = ids_2.some(function (id) {
                                            if (id === layerId) {
                                                return true;
                                            }
                                        });
                                        if (lv === null || lv === void 0 ? void 0 : lv.layer) {
                                            lv.layer.visible = shown;
                                        }
                                    });
                                });
                            }
                            ariadesc = ((_d = this === null || this === void 0 ? void 0 : this.applicationConfig) === null || _d === void 0 ? void 0 : _d.mapA11yDesc) || (portalItem === null || portalItem === void 0 ? void 0 : portalItem.snippet) || (portalItem === null || portalItem === void 0 ? void 0 : portalItem.description) || null;
                            if (ariadesc) {
                                document.getElementById('mapDescription').innerHTML = ariadesc;
                                rootNode = document.getElementsByClassName('esri-view-surface');
                                this.view.container.setAttribute("aria-describedby", 'mapDescription');
                                for (k = 0; k < rootNode.length; k++) {
                                    rootNode[k].setAttribute('aria-describedby', 'mapDescription');
                                }
                            }
                            (0, watchUtils_1.whenDefinedOnce)(this.view, "extent", function () {
                                _this.initialExtent = _this.view.extent.clone();
                            });
                            return [3 /*break*/, 6];
                        case 5:
                            e_1 = _h.sent();
                            return [2 /*return*/, new Error_1.default({
                                    title: "Error",
                                    message: "Unable to load ".concat(((_e = this === null || this === void 0 ? void 0 : this.item) === null || _e === void 0 ? void 0 : _e.title) || " the application"),
                                    container: container
                                })];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        LayoutViewModel.prototype.resetExtent = function () {
            if (this.initialExtent)
                this.view.goTo(this.initialExtent, {
                    animate: !(0, a11yUtils_1.prefersReducedMotion)()
                }).catch(function () { });
        };
        tslib_1.__decorate([
            (0, decorators_1.property)({ dependsOn: ["view.ready", "item.loadStatus"], readOnly: true })
        ], LayoutViewModel.prototype, "state", null);
        tslib_1.__decorate([
            (0, decorators_1.property)()
        ], LayoutViewModel.prototype, "applicationConfig", void 0);
        tslib_1.__decorate([
            (0, decorators_1.property)()
        ], LayoutViewModel.prototype, "initialExtent", void 0);
        tslib_1.__decorate([
            (0, decorators_1.property)()
        ], LayoutViewModel.prototype, "applicationBase", void 0);
        tslib_1.__decorate([
            (0, decorators_1.property)()
        ], LayoutViewModel.prototype, "item", void 0);
        tslib_1.__decorate([
            (0, decorators_1.property)()
        ], LayoutViewModel.prototype, "view", void 0);
        LayoutViewModel = tslib_1.__decorate([
            (0, decorators_1.subclass)("esri.demo.LayoutViewModel")
        ], LayoutViewModel);
        return LayoutViewModel;
    }((Accessor_1.default)));
    return LayoutViewModel;
});
