/*
 *   Copyright (c) 2022 Esri
 *   All rights reserved.

 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at

 *   http://www.apache.org/licenses/LICENSE-2.0

 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
define(["require", "exports", "tslib", "./utils/esriWidgetUtils", "TemplatesCommonLib/baseClasses/support/itemUtils", "TemplatesCommonLib/baseClasses/support/domHelper", "TemplatesCommonLib/structuralFunctionality/telemetry/telemetry", "./ConfigurationSettings", "esri/core/Handles", "./ui/Layout", "./ui/MobilePanel", "./ui/Panel", "esri/core/promiseUtils", "esri/core/watchUtils", "esri/geometry/support/jsonUtils", "esri/core/urlUtils", "./utils/printUtils", "esri/widgets/Search", "./utils/popupUtils", "./utils/themeUtils"], function (require, exports, tslib_1, esriWidgetUtils_1, itemUtils_1, domHelper_1, telemetry_1, ConfigurationSettings_1, Handles_1, Layout_1, MobilePanel_1, Panel_1, promiseUtils_1, watchUtils_1, jsonUtils_1, urlUtils_1, printUtils_1, Search_1, popupUtils_1, themeUtils_1) {
    "use strict";
    telemetry_1 = tslib_1.__importDefault(telemetry_1);
    ConfigurationSettings_1 = tslib_1.__importDefault(ConfigurationSettings_1);
    Handles_1 = tslib_1.__importDefault(Handles_1);
    Layout_1 = tslib_1.__importDefault(Layout_1);
    MobilePanel_1 = tslib_1.__importDefault(MobilePanel_1);
    Panel_1 = tslib_1.__importDefault(Panel_1);
    Search_1 = tslib_1.__importDefault(Search_1);
    var Sidebar = /** @class */ (function () {
        function Sidebar() {
            this._handles = null;
            this._appConfig = null;
            this._mobilePanel = null;
            this._panel = null;
            this._telemetry = null;
            this.view = null;
            this._defaultViewRotation = 0;
            this._page = null;
        }
        //--------------------------------------------------------------------------
        //
        //  Public Methods
        //
        //--------------------------------------------------------------------------
        Sidebar.prototype.init = function (base) {
            var _a;
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var config, results, webMapItems, item, layout, layoutHandle;
                var _this = this;
                return tslib_1.__generator(this, function (_b) {
                    if (!base) {
                        console.error("ApplicationBase is not defined");
                        return [2 /*return*/];
                    }
                    this._handles = new Handles_1.default();
                    this._base = base;
                    config = base.config, results = base.results;
                    if (config === null || config === void 0 ? void 0 : config.exportPDF) {
                        config.exportToPDF = config.exportPDF;
                    }
                    this._appConfig = new ConfigurationSettings_1.default(config);
                    (0, themeUtils_1.updateThemeConfig)(this._appConfig);
                    this.createTelemetry();
                    webMapItems = results.webMapItems;
                    if (config.legend && !this._appConfig.legendPanel) {
                        this._appConfig.legendPanel = config.legend;
                    }
                    this.handleThemeUpdates();
                    this._handles.add[(0, watchUtils_1.init)(this._appConfig, "coverPage", function () {
                        _this._createPage();
                    }), "configuration"];
                    item = null;
                    webMapItems.forEach(function (response) {
                        var _a, _b, _c;
                        if (((_a = response === null || response === void 0 ? void 0 : response.value) === null || _a === void 0 ? void 0 : _a.id) === ((_b = _this._appConfig) === null || _b === void 0 ? void 0 : _b.webmap)) {
                            item = response.value;
                        }
                        else if (((_c = _this._appConfig) === null || _c === void 0 ? void 0 : _c.webmap) === "default") {
                            item = response.value;
                        }
                    });
                    if (!item) {
                        // show error page 
                        document.location.href = "../../shared/unavailable/index.html?appid=".concat((_a = config === null || config === void 0 ? void 0 : config.appid) !== null && _a !== void 0 ? _a : null);
                        return [2 /*return*/];
                    }
                    layout = new Layout_1.default({
                        applicationBase: base,
                        applicationConfig: this._appConfig,
                        item: item,
                        container: document.getElementById("appContainer")
                    });
                    layoutHandle = layout.watch("view", function () {
                        layoutHandle.remove();
                        var view = layout.view;
                        _this.view = view;
                        _this._addTitle();
                        // watch for option/cmd + m key
                        document.addEventListener("keydown", function (e) {
                            var _a;
                            if ((e === null || e === void 0 ? void 0 : e.altKey) && (e === null || e === void 0 ? void 0 : e.code) === "KeyM") {
                                (_a = _this === null || _this === void 0 ? void 0 : _this.view) === null || _a === void 0 ? void 0 : _a.focus();
                            }
                        });
                        _this._defaultViewRotation = _this.view.rotation || 0;
                        var find = config.find, marker = config.marker;
                        if (_this._isHoverMobile()) {
                            _this._appConfig.popupHover = false;
                        }
                        _this._handlePopupBehavior(view);
                        (0, itemUtils_1.findQuery)(find, view);
                        (0, itemUtils_1.goToMarker)(marker, view);
                        // Add widgets and side panel 
                        var widgetProps = { view: view, config: _this._appConfig, portal: base.portal, telemetry: _this._telemetry };
                        window.addEventListener("beforeprint", function (e) {
                            (0, printUtils_1.takeScreenshotAndPrint)(widgetProps);
                        });
                        // "configure" handles are cleared if we are outside of the config experience
                        _this._handles.add([
                            (0, watchUtils_1.init)(_this._appConfig, "customUrlParam, customURLParamName", function (newValue, oldValue, propertyName) {
                                var _a, _b, _c;
                                var customUrlParam = (_b = (_a = _this._appConfig.customUrlParam) === null || _a === void 0 ? void 0 : _a.layers) === null || _b === void 0 ? void 0 : _b[0];
                                var fieldName = (_c = customUrlParam === null || customUrlParam === void 0 ? void 0 : customUrlParam.fields) === null || _c === void 0 ? void 0 : _c[0];
                                var customUrlParamName = _this._appConfig.customURLParamName;
                                if (!customUrlParam || !customUrlParamName || !fieldName) {
                                    return;
                                }
                                var layer = view.map.findLayerById(customUrlParam.id);
                                var layerSearchSource = {
                                    layer: layer,
                                    searchFields: customUrlParam.fields,
                                    outFields: ["*"],
                                    exactMatch: true,
                                    displayField: fieldName
                                };
                                var href = _this._appConfig
                                    .withinConfigurationExperience
                                    ? document.referrer
                                    : document.location.href;
                                var searchResults = (0, urlUtils_1.urlToObject)(href);
                                var searchTerm = null;
                                if (searchResults === null || searchResults === void 0 ? void 0 : searchResults.query) {
                                    if (customUrlParamName in searchResults.query) {
                                        searchTerm = searchResults.query[customUrlParamName];
                                    }
                                }
                                if (layer) {
                                    var search = new Search_1.default({
                                        view: view,
                                        resultGraphicEnabled: false,
                                        searchAllEnabled: false,
                                        includeDefaultSources: false,
                                        suggestionsEnabled: false,
                                        sources: [layerSearchSource],
                                        searchTerm: searchTerm
                                    });
                                    search.search();
                                }
                            }), (0, watchUtils_1.init)(_this._appConfig, "applyCustomTheme, customTheme", function (newValue, oldValue, propertyName) {
                                var _a, _b, _c, _d, _e, _f;
                                var _g = _this._appConfig, applyCustomTheme = _g.applyCustomTheme, customTheme = _g.customTheme;
                                var sharedThemeProps = (_c = (_b = (_a = _this === null || _this === void 0 ? void 0 : _this._base) === null || _a === void 0 ? void 0 : _a.portal) === null || _b === void 0 ? void 0 : _b.portalProperties) === null || _c === void 0 ? void 0 : _c.sharedTheme;
                                if ((customTheme === null || customTheme === void 0 ? void 0 : customTheme.applySharedTheme) && !(customTheme === null || customTheme === void 0 ? void 0 : customTheme.logo) && ((_d = sharedThemeProps === null || sharedThemeProps === void 0 ? void 0 : sharedThemeProps.logo) === null || _d === void 0 ? void 0 : _d.small)) {
                                    customTheme.logo = sharedThemeProps.logo.small;
                                }
                                if (((_e = _this._appConfig) === null || _e === void 0 ? void 0 : _e.applySharedTheme) && !((_f = _this === null || _this === void 0 ? void 0 : _this._appConfig) === null || _f === void 0 ? void 0 : _f.customTheme)) {
                                    _this._appConfig.customTheme = {
                                        applySharedTheme: true
                                    };
                                }
                                (0, themeUtils_1.handleCustomTheme)(_this._appConfig);
                            }),
                            (0, watchUtils_1.init)(_this._appConfig, "disableScroll", function (newValue, oldValue, propertyName) {
                                widgetProps.propertyName = propertyName;
                                (0, esriWidgetUtils_1.addOverlay)(widgetProps);
                            }), (0, watchUtils_1.init)(_this._appConfig, "extentSelectorConfig, extentSelector", function () {
                                var _a, _b;
                                if (((_a = _this._appConfig) === null || _a === void 0 ? void 0 : _a.extentSelectorConfig) && ((_b = _this._appConfig) === null || _b === void 0 ? void 0 : _b.extentSelector)) {
                                    var constraints = _this._appConfig.extentSelectorConfig.constraints;
                                    var geometry = constraints === null || constraints === void 0 ? void 0 : constraints.geometry;
                                    if (geometry) {
                                        var extent = (0, jsonUtils_1.fromJSON)(geometry);
                                        if (extent && ((extent === null || extent === void 0 ? void 0 : extent.type) === "extent" || (extent === null || extent === void 0 ? void 0 : extent.type) === "polygon")) {
                                            constraints.geometry = extent;
                                            _this.view.goTo(extent, { animate: false }).catch(function () { });
                                        }
                                    }
                                    else {
                                        constraints.geometry = null;
                                    }
                                    constraints.minScale = +constraints.minScale;
                                    constraints.maxScale = +constraints.maxScale;
                                    _this.view.constraints = constraints;
                                    _this._setMapViewRotation();
                                }
                                else {
                                    if (_this.view) {
                                        _this.view.rotation = _this._defaultViewRotation;
                                        _this.view.constraints.geometry = null;
                                        _this.view.constraints.minZoom = -1;
                                        _this.view.constraints.maxZoom = -1;
                                        _this.view.constraints.minScale = 0;
                                        _this.view.constraints.maxScale = 0;
                                    }
                                    layout === null || layout === void 0 ? void 0 : layout.viewModel.resetExtent();
                                }
                            }),
                            (0, watchUtils_1.init)(_this._appConfig, "mapZoom, mapZoomPosition", function (newValue, oldValue, propertyName) {
                                widgetProps.propertyName = propertyName;
                                (0, esriWidgetUtils_1.addZoom)(widgetProps);
                            }),
                            (0, watchUtils_1.init)(_this._appConfig, "keyboardShortcuts", function (newValue, oldValue, propertyName) {
                                var _a;
                                widgetProps.propertyName = propertyName;
                                var mobile = ('ontouchstart' in (document === null || document === void 0 ? void 0 : document.documentElement) && ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.userAgent) === null || _a === void 0 ? void 0 : _a.match(/Mobi/)));
                                if (!mobile)
                                    (0, esriWidgetUtils_1.addKeyboardShortcuts)(widgetProps);
                            }),
                            (0, watchUtils_1.init)(_this._appConfig, "home, homePosition", function (newValue, oldValue, propertyName) {
                                widgetProps.propertyName = propertyName;
                                (0, esriWidgetUtils_1.addHome)(widgetProps);
                            }),
                            (0, watchUtils_1.init)(_this._appConfig, "locateWidget, locateWidgetPosition", function (newValue, oldValue, propertyName) {
                                (0, esriWidgetUtils_1.addLocate)(tslib_1.__assign(tslib_1.__assign({}, widgetProps), { propertyName: propertyName }));
                            }),
                            (0, watchUtils_1.init)(_this._appConfig, "scalebar, scalebarPosition", function (newValue, oldValue, propertyName) {
                                widgetProps.propertyName = propertyName;
                                (0, esriWidgetUtils_1.addScaleBar)(widgetProps);
                            }),
                            (0, watchUtils_1.init)(_this._appConfig, ["splash", "splashFullScreen", "splashButtonPosition", "splashButtonText", "info", "detailsOpenAtStart"], function (newValue, oldValue, propertyName) {
                                widgetProps.propertyName = propertyName;
                                (0, esriWidgetUtils_1.addSplash)(widgetProps);
                            }),
                            (0, watchUtils_1.init)(_this._appConfig, "search, searchOpenAtStart, extentSelector, extentSelectorConfig, searchPosition,searchConfiguration", function (newValue, oldValue, propertyName) {
                                widgetProps.propertyName = propertyName;
                                (0, esriWidgetUtils_1.addSearch)(widgetProps);
                            }),
                            (0, watchUtils_1.init)(_this._appConfig, "basemapToggle, basemapTogglePosition, basemapSelector, nextBasemap", function (newValue, oldValue, propertyName) {
                                widgetProps.propertyName = propertyName;
                                (0, esriWidgetUtils_1.addBasemap)(widgetProps);
                            }),
                            (0, watchUtils_1.init)(_this._appConfig, "share, shareIncludeSocial, theme, header", function (newValue, oldValue, propertyName) {
                                widgetProps.propertyName = propertyName;
                                (0, esriWidgetUtils_1.addShare)(widgetProps);
                            }),
                            (0, watchUtils_1.init)(_this._appConfig, ["measure", "measureOpenAtStart", "measurePosition"], function (newValue, oldValue, propertyName) {
                                (0, esriWidgetUtils_1.addMeasurement)(tslib_1.__assign(tslib_1.__assign({}, widgetProps), { propertyName: propertyName }));
                            }),
                            (0, watchUtils_1.init)(_this._appConfig, "exportPDF, header", function (newValue, oldValue, propertyName) {
                                (0, esriWidgetUtils_1.addExportPDF)(tslib_1.__assign(tslib_1.__assign({}, widgetProps), { propertyName: propertyName }));
                            }),
                            (0, watchUtils_1.init)(_this._appConfig, "screenshot, screenshotPosition", function (newValue, oldValue, propertyName) {
                                (0, esriWidgetUtils_1.addScreenshot)(tslib_1.__assign(tslib_1.__assign({}, widgetProps), { propertyName: propertyName }));
                            }),
                        ], "configuration");
                        var shell = layout.calciteShell;
                        _this._handles.add((0, watchUtils_1.init)(view, ["resizing", "widthBreakpoint"], function (value) {
                            _this.createPanel(view, value, shell);
                        }));
                        _this._cleanUpHandles();
                    });
                    return [2 /*return*/];
                });
            });
        };
        Sidebar.prototype._openPopup = function (view, e) {
            if (!view)
                return;
            var location = view.toMap(e);
            try {
                if (!location && view)
                    return;
                view.popup.open({
                    updateLocationEnabled: false,
                    location: location,
                    view: view,
                    fetchFeatures: true
                });
                (0, popupUtils_1.updatePopup)(view);
            }
            catch (error) {
            }
        };
        Sidebar.prototype._isHoverMobile = function () {
            return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) ? true : false;
        };
        Sidebar.prototype._addTitle = function () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            var title = this._appConfig.title;
            var map = (_a = this === null || this === void 0 ? void 0 : this.view) === null || _a === void 0 ? void 0 : _a.map;
            if (!title) {
                title = ((_e = (_d = (_c = (_b = this === null || this === void 0 ? void 0 : this._base) === null || _b === void 0 ? void 0 : _b.results) === null || _c === void 0 ? void 0 : _c.applicationItem) === null || _d === void 0 ? void 0 : _d.value) === null || _e === void 0 ? void 0 : _e.title) ? (_j = (_h = (_g = (_f = this === null || this === void 0 ? void 0 : this._base) === null || _f === void 0 ? void 0 : _f.results) === null || _g === void 0 ? void 0 : _g.applicationItem) === null || _h === void 0 ? void 0 : _h.value) === null || _j === void 0 ? void 0 : _j.title : (_k = map === null || map === void 0 ? void 0 : map.portalItem) === null || _k === void 0 ? void 0 : _k.title;
            }
            this._appConfig.title = title;
            (0, domHelper_1.setPageTitle)(title);
            this._handles.add((0, watchUtils_1.init)(this._appConfig, "title", domHelper_1.setPageTitle), "configuration");
        };
        Sidebar.prototype._handlePopupBehavior = function (view) {
            var _this = this;
            this._handles.add((0, watchUtils_1.init)(this._appConfig, ["popupHover", "popupPanel"], function (value, oldVal, propertyName) {
                var _a = _this._appConfig, popupHover = _a.popupHover, popupPanel = _a.popupPanel;
                if (!popupHover) {
                    if (_this === null || _this === void 0 ? void 0 : _this._handles) {
                        _this._handles.remove("popupHover");
                    }
                    //	view.popup.autoOpenEnabled = true;
                    (0, popupUtils_1.updatePopup)(view);
                }
                else if (popupHover && !popupPanel) {
                    (0, popupUtils_1.findPopupAction)(view, "popup-hover-action");
                    if (popupHover) {
                        var popupHoverAction = {
                            id: "popup-hover-action",
                            image: "./assets/pushpin.png",
                            title: _this._appConfig.bundle.tools.hoverPopupTip,
                            visible: true
                        };
                        view.popup.actions.add(popupHoverAction);
                    }
                    // create the handle 
                    view.popup.spinnerEnabled = false;
                    view.popup.autoOpenEnabled = false;
                    view.popup.defaultPopupTemplateEnabled = true;
                    var lastHitTest_1;
                    var click_1 = false;
                    _this._handles.add(view.on("pointer-move", (0, promiseUtils_1.debounce)(function (e) {
                        if (view.popup.autoOpenEnabled === true) {
                            return;
                        }
                        if (lastHitTest_1)
                            clearTimeout(lastHitTest_1);
                        // if they click let's open popup and stop hover 
                        _this._handles.add(view.on("click", function () {
                            view.popup.autoOpenEnabled = true;
                            click_1 = true;
                            (0, popupUtils_1.updatePopup)(view);
                            _this._handles.add((0, watchUtils_1.whenFalseOnce)(view.popup, "visible", function () {
                                if (popupHover) {
                                    view.popup.autoOpenEnabled = false;
                                    click_1 = false;
                                }
                            }), "popupHover");
                        }), "popupHover");
                        lastHitTest_1 = setTimeout(function () {
                            if (!click_1)
                                _this._openPopup(view, e);
                        }, 100);
                    })), "popupHover");
                    (0, watchUtils_1.watch)(view.popup, "selected-feature", function () {
                        (0, popupUtils_1.updatePopup)(view);
                    });
                }
            }), "configuration");
        };
        Sidebar.prototype.createPanel = function (view, breakpoint, shell) {
            var props = {
                applicationConfig: this._appConfig,
                applicationBase: this._base,
                view: view
            };
            var width = window.innerWidth; //view?.width || 701;
            if (width <= 700) {
                if (shell === null || shell === void 0 ? void 0 : shell.contains(this._mobilePanel)) {
                    return;
                }
                this._mobilePanel = null;
                this._mobilePanel = new MobilePanel_1.default(tslib_1.__assign(tslib_1.__assign({}, props), { container: document.createElement("div") })).container;
                if (!(shell === null || shell === void 0 ? void 0 : shell.contains(this._mobilePanel)))
                    shell.appendChild(this._mobilePanel);
                this._mobilePanel.classList.add("mobile-shell-panel");
                if (this._panel && (shell === null || shell === void 0 ? void 0 : shell.contains(this._panel))) {
                    shell.removeChild(this._panel);
                }
            }
            else {
                if (shell === null || shell === void 0 ? void 0 : shell.contains(this._panel))
                    return;
                this._panel = null;
                this._panel = new Panel_1.default(tslib_1.__assign(tslib_1.__assign({}, props), { container: document.createElement("calcite-shell-panel") })).container;
                if (!(shell === null || shell === void 0 ? void 0 : shell.contains(this._panel)))
                    shell === null || shell === void 0 ? void 0 : shell.appendChild(this._panel);
                this._panel.classList.add("desktop-shell-panel");
                if (this._mobilePanel && (shell === null || shell === void 0 ? void 0 : shell.contains(this._mobilePanel))) {
                    shell.removeChild(this._mobilePanel);
                }
            }
        };
        Sidebar.prototype.updateAppTheme = function (theme) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var style, inverseTheme, container, elements, i, node;
                return tslib_1.__generator(this, function (_a) {
                    style = document.getElementById("esri-stylesheet");
                    style.href = style.href.indexOf("light") !== -1 ? style.href.replace(/light/g, theme) : style.href.replace(/dark/g, theme);
                    inverseTheme = theme === "light" ? "dark" : "light";
                    container = document.getElementById("appContainer");
                    container.classList.add("calcite-theme-".concat(theme));
                    elements = document.getElementsByClassName("calcite-theme-".concat(inverseTheme));
                    for (i = 0; i < elements.length; i++) {
                        node = elements[i];
                        node.classList.remove("calcite-theme-".concat(inverseTheme));
                        node.classList.add("calcite-theme-".concat(theme));
                    }
                    return [2 /*return*/];
                });
            });
        };
        Sidebar.prototype._createPage = function () {
            var _a;
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var Page, _b, coverPage, coverPageConfig, container, props;
                var _this = this;
                return tslib_1.__generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, new Promise(function (resolve_1, reject_1) { require(["./ui/Page/Page"], resolve_1, reject_1); }).then(tslib_1.__importStar)];
                        case 1:
                            Page = _c.sent();
                            _b = this._appConfig, coverPage = _b.coverPage, coverPageConfig = _b.coverPageConfig;
                            if (coverPage && !this._page) {
                                container = document.createElement("div");
                                props = tslib_1.__assign({ portal: this._base.portal, container: container }, coverPageConfig);
                                this._page = new Page.default(props);
                                // watch for config updates 
                                this._handles.add((0, watchUtils_1.watch)(this._appConfig, "coverPageConfig", function () {
                                    if (!_this._page)
                                        return;
                                    var coverPageConfig = _this._appConfig.coverPageConfig;
                                    var keys = Object.keys(coverPageConfig);
                                    keys.forEach(function (key) {
                                        _this._page.set(key, coverPageConfig[key]);
                                    });
                                }), "page");
                            }
                            else {
                                this._handles.remove("page");
                                (_a = this._page) === null || _a === void 0 ? void 0 : _a.destroy();
                                this._page = null;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        Sidebar.prototype.handleThemeUpdates = function () {
            var _this = this;
            // Check for a preferred color scheme and then
            // monitor updates to that color scheme and the
            // configuration panel updates.
            // Also todo on app name info going to GA
            if (!this._appConfig.theme) {
                this._appConfig.theme = window.matchMedia("(prefers-color-scheme: dark)") ? "dark" : "light";
            }
            this._handles.add[(0, watchUtils_1.init)(this._appConfig, "theme", this.updateAppTheme),
                (0, watchUtils_1.init)(this._appConfig, "panelSize", function () {
                    var panelSize = _this._appConfig.panelSize;
                    document.body.classList.remove("panel-m");
                    document.body.classList.contains("panel-l");
                    document.body.classList.contains("panel-s");
                    document.body.classList.add("panel-".concat(panelSize));
                }),
                (0, watchUtils_1.init)(this._appConfig, "customCSS", function (newValue, oldValue, propertyName) {
                    _this._handleCustomCSS();
                }),
                "configuration"];
        };
        Sidebar.prototype.createTelemetry = function () {
            var _a, _b;
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var portal, appName, telemTS;
                var _this = this;
                return tslib_1.__generator(this, function (_c) {
                    portal = this._base.portal;
                    appName = (_b = (_a = this._base.config) === null || _a === void 0 ? void 0 : _a.telemetry) === null || _b === void 0 ? void 0 : _b.name;
                    telemTS = new telemetry_1.default({
                        portal: portal,
                        config: this._appConfig,
                        appName: appName
                    });
                    (0, watchUtils_1.whenDefinedOnce)(telemTS, "instance", function (telemInstance) {
                        var _a;
                        if (telemInstance != null) {
                            _this._telemetry = telemInstance;
                            (_a = _this._telemetry) === null || _a === void 0 ? void 0 : _a.logPageView("".concat(window.location.pathname).concat(window.location.search));
                        }
                    });
                    return [2 /*return*/];
                });
            });
        };
        Sidebar.prototype._handleCustomCSS = function () {
            var customCSSStyleSheet = document.getElementById("customCSS");
            if (customCSSStyleSheet) {
                customCSSStyleSheet.remove();
            }
            var styles = document.createElement("style");
            styles.id = "customCSS";
            var styleTextNode = document.createTextNode(this._appConfig.customCSS);
            styles.appendChild(styleTextNode);
            document.head.appendChild(styles);
        };
        Sidebar.prototype._cleanUpHandles = function () {
            // if we aren't in the config experience remove all handlers after load
            if (!this._appConfig.withinConfigurationExperience) {
                this._handles.remove("configuration");
            }
        };
        Sidebar.prototype._setMapViewRotation = function () {
            var _a, _b, _c, _d, _e;
            var view = this.view;
            var mapRotation = (_d = (_c = (_b = (_a = this._appConfig) === null || _a === void 0 ? void 0 : _a.extentSelectorConfig) === null || _b === void 0 ? void 0 : _b.mapRotation) !== null && _c !== void 0 ? _c : this._defaultViewRotation) !== null && _d !== void 0 ? _d : null;
            if (!((_e = view === null || view === void 0 ? void 0 : view.constraints) === null || _e === void 0 ? void 0 : _e.rotationEnabled)) { // if rotation is disabled
                view.constraints.rotationEnabled = true; // set rotation to enabled
                view.rotation = mapRotation; // set rotation value
                view.constraints.rotationEnabled = false; // set rotation back to disabled
            }
            else {
                if (view)
                    view.rotation = mapRotation;
            }
        };
        return Sidebar;
    }());
    return Sidebar;
});
