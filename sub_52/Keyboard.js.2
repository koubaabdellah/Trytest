/*
 *   Copyright (c) 2022 Esri
 *   All rights reserved.

 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at

 *   http://www.apache.org/licenses/LICENSE-2.0

 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
define(["require", "exports", "tslib", "esri/core/accessorSupport/decorators", "esri/widgets/Widget", "esri/widgets/support/widget", "../utils/utils"], function (require, exports, tslib_1, decorators_1, Widget_1, widget_1, utils_1) {
    "use strict";
    Widget_1 = tslib_1.__importDefault(Widget_1);
    var Keyboard = /** @class */ (function (_super) {
        tslib_1.__extends(Keyboard, _super);
        function Keyboard(params) {
            var _this = _super.call(this, params) || this;
            _this.bundle = null;
            return _this;
        }
        Keyboard.prototype.postInitialize = function () {
        };
        Keyboard.prototype.render = function () {
            var _a, _b;
            var modifierKey = (0, utils_1.isMacLike)() ? "Option" : "Alt";
            var commands = ((_a = this === null || this === void 0 ? void 0 : this.view) === null || _a === void 0 ? void 0 : _a.type) === "2d" ? this._getMapViewCommands() : null;
            return ((0, widget_1.tsx)("calcite-block", { open: true, class: this.classes("keyboard-shortcuts", "calcite-theme-".concat((_b = this === null || this === void 0 ? void 0 : this.config) === null || _b === void 0 ? void 0 : _b.theme), "keyboard-base"), heading: this.bundle.generalShortcuts.label },
                (0, widget_1.tsx)("div", { tabindex: "0", class: "shortcuts-base" },
                    (0, widget_1.tsx)("table", { class: "shortcuts shortcuts-space" },
                        this.renderTableHeader(),
                        (0, widget_1.tsx)("tr", null,
                            (0, widget_1.tsx)("td", null, "".concat(modifierKey, " + M")),
                            (0, widget_1.tsx)("td", null, this.bundle.generalShortcuts.title))),
                    (0, widget_1.tsx)("calcite-label", null, this.bundle.generalShortcuts.title),
                    (0, widget_1.tsx)("table", { class: "shortcuts" },
                        this.renderTableHeader(),
                        commands.map(function (command) {
                            return (0, widget_1.tsx)("tr", null,
                                (0, widget_1.tsx)("td", null, command.alias),
                                (0, widget_1.tsx)("td", null, command.title));
                        })))));
        };
        Keyboard.prototype.renderTableHeader = function () {
            return ((0, widget_1.tsx)("tr", null,
                (0, widget_1.tsx)("th", null, this.bundle.generalShortcuts.shortcut),
                (0, widget_1.tsx)("th", null, this.bundle.generalShortcuts.action)));
        };
        Keyboard.prototype._getMapViewCommands = function () {
            var shortcutsMapView = this.bundle.shortcutsMapView;
            return [
                {
                    alias: shortcutsMapView.arrowKeys,
                    title: shortcutsMapView.nudge
                },
                {
                    alias: "N",
                    title: shortcutsMapView.N
                },
                {
                    alias: "A",
                    title: shortcutsMapView.A
                },
                {
                    alias: "D",
                    title: shortcutsMapView.D
                },
                {
                    alias: "+",
                    title: shortcutsMapView.plus
                },
                {
                    alias: "-",
                    title: shortcutsMapView.minus
                }
            ];
        };
        Keyboard.prototype._getSceneViewCommands = function () {
            // TOdo get the commands for scene view but only get the following if 
            // its a global scene 
            // U, J, Arrow Keys (nudge)
        };
        tslib_1.__decorate([
            (0, decorators_1.property)()
        ], Keyboard.prototype, "config", void 0);
        tslib_1.__decorate([
            (0, decorators_1.property)()
        ], Keyboard.prototype, "view", void 0);
        tslib_1.__decorate([
            (0, decorators_1.property)(),
            (0, widget_1.messageBundle)("instant/../t9n/common")
        ], Keyboard.prototype, "bundle", void 0);
        Keyboard = tslib_1.__decorate([
            (0, decorators_1.subclass)("Keyboard")
        ], Keyboard);
        return Keyboard;
    }(Widget_1.default));
    return Keyboard;
});
