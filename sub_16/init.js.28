// Copyright 2020 Esri
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.â€‹
define(["require", "exports", "tslib", "../config/applicationBase", "../config/application", "TemplatesCommonLib/baseClasses/ApplicationBase", "TemplatesCommonLib/structuralFunctionality/t9nUtils", "esri/core/promiseUtils", "./Main"], function (require, exports, tslib_1, applicationBase_1, application_1, ApplicationBase_1, t9nUtils_1, promiseUtils_1, Application) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    applicationBase_1 = tslib_1.__importDefault(applicationBase_1);
    application_1 = tslib_1.__importDefault(application_1);
    ApplicationBase_1 = tslib_1.__importDefault(ApplicationBase_1);
    promiseUtils_1.eachAlways([
        t9nUtils_1.handleT9N("minimalist", "minimalist", "minimalist/app/t9n/common"),
        t9nUtils_1.handleT9N("instant", "instant", "instant/../t9n/common")
    ]).then(function (results) {
        var appBundle = results[0], bundle = results[1];
        var Main = new Application();
        new ApplicationBase_1.default({
            config: application_1.default,
            settings: applicationBase_1.default
        })
            .load()
            .then(function (base) {
            base.config.bundle = bundle === null || bundle === void 0 ? void 0 : bundle.value;
            base.config.appBundle = appBundle === null || appBundle === void 0 ? void 0 : appBundle.value;
            Main.init(base);
        }, function (message) {
            if (message === "identity-manager:not-authorized") {
                document.body.classList.remove("configurable-application--loading");
                document.body.classList.add("app-error");
                document.body.innerHTML = "<h1>" + bundle.licenseError.title + "</h1><p>" + bundle.licenseError.message + "</p>";
            }
            else if ((message === null || message === void 0 ? void 0 : message.error) === "application:origin-other") {
                document.location.href = "../../shared/origin/index.html?appUrl=" + message.appUrl;
            }
            else if ((message === null || message === void 0 ? void 0 : message.message) === "Item does not exist or is inaccessible.") {
                document.body.classList.remove("configurable-application--loading");
                document.body.classList.add("app-error");
                document.body.innerHTML = "<p>" + (message === null || message === void 0 ? void 0 : message.message) + "</p>";
            }
        });
    });
});
