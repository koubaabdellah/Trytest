/**
* jquery-match-height master by @liabru
* http://brm.io/jquery-match-height/
* License: MIT
*/

;(function(factory) { // eslint-disable-line no-extra-semi
    'use strict';
    if (typeof define === 'function' && define.amd) {
        // AMD
        define(['jquery'], factory);
    } else if (typeof module !== 'undefined' && module.exports) {
        // CommonJS
        module.exports = factory(require('jquery'));
    } else {
        // Global
        factory(jQuery);
    }
})(function($) {
    /*
    *  internal
    */

    var _previousResizeWidth = -1,
        _updateTimeout = -1;

    /*
    *  _parse
    *  value parse utility function
    */

    var _parse = function(value) {
        // parse value and convert NaN to 0
        return parseFloat(value) || 0;
    };

    /*
    *  _rows
    *  utility function returns array of jQuery selections representing each row
    *  (as displayed after float wrapping applied by browser)
    */

    var _rows = function(elements) {
        var tolerance = 1,
            $elements = $(elements),
            lastTop = null,
            rows = [];

        // group elements by their top position
        $elements.each(function(){
            var $that = $(this),
                top = $that.offset().top - _parse($that.css('margin-top')),
                lastRow = rows.length > 0 ? rows[rows.length - 1] : null;

            if (lastRow === null) {
                // first item on the row, so just push it
                rows.push($that);
            } else {
                // if the row top is the same, add to the row group
                if (Math.floor(Math.abs(lastTop - top)) <= tolerance) {
                    rows[rows.length - 1] = lastRow.add($that);
                } else {
                    // otherwise start a new row group
                    rows.push($that);
                }
            }

            // keep track of the last row top
            lastTop = top;
        });

        return rows;
    };

    /*
    *  _parseOptions
    *  handle plugin options
    */

    var _parseOptions = function(options) {
        var opts = {
            byRow: true,
            property: 'height',
            target: null,
            remove: false
        };

        if (typeof options === 'object') {
            return $.extend(opts, options);
        }

        if (typeof options === 'boolean') {
            opts.byRow = options;
        } else if (options === 'remove') {
            opts.remove = true;
        }

        return opts;
    };

    /*
    *  matchHeight
    *  plugin definition
    */

    var matchHeight = $.fn.matchHeight = function(options) {
        var opts = _parseOptions(options);

        // handle remove
        if (opts.remove) {
            var that = this;

            // remove fixed height from all selected elements
            this.css(opts.property, '');

            // remove selected elements from all groups
            $.each(matchHeight._groups, function(key, group) {
                group.elements = group.elements.not(that);
            });

            // TODO: cleanup empty groups

            return this;
        }

        if (this.length <= 1 && !opts.target) {
            return this;
        }

        // keep track of this group so we can re-apply later on load and resize events
        matchHeight._groups.push({
            elements: this,
            options: opts
        });

        // match each element's height to the tallest element in the selection
        matchHeight._apply(this, opts);

        return this;
    };

    /*
    *  plugin global options
    */

    matchHeight.version = 'master';
    matchHeight._groups = [];
    matchHeight._throttle = 80;
    matchHeight._maintainScroll = false;
    matchHeight._beforeUpdate = null;
    matchHeight._afterUpdate = null;
    matchHeight._rows = _rows;
    matchHeight._parse = _parse;
    matchHeight._parseOptions = _parseOptions;

    /*
    *  matchHeight._apply
    *  apply matchHeight to given elements
    */

    matchHeight._apply = function(elements, options) {
        var opts = _parseOptions(options),
            $elements = $(elements),
            rows = [$elements];

        // take note of scroll position
        var scrollTop = $(window).scrollTop(),
            htmlHeight = $('html').outerHeight(true);

        // get hidden parents
        var $hiddenParents = $elements.parents().filter(':hidden');

        // cache the original inline style
        $hiddenParents.each(function() {
            var $that = $(this);
            $that.data('style-cache', $that.attr('style'));
        });

        // temporarily must force hidden parents visible
        $hiddenParents.css('display', 'block');

        // get rows if using byRow, otherwise assume one row
        if (opts.byRow && !opts.target) {

            // must first force an arbitrary equal height so floating elements break evenly
            $elements.each(function() {
                var $that = $(this),
                    display = $that.css('display');

                // temporarily force a usable display value
                if (display !== 'inline-block' && display !== 'flex' && display !== 'inline-flex') {
                    display = 'block';
                }

                // cache the original inline style
                $that.data('style-cache', $that.attr('style'));

                $that.css({
                    'display': display,
                    'padding-top': '0',
                    'padding-bottom': '0',
                    'margin-top': '0',
                    'margin-bottom': '0',
                    'border-top-width': '0',
                    'border-bottom-width': '0',
                    'height': '100px',
                    'overflow': 'hidden'
                });
            });

            // get the array of rows (based on element top position)
            rows = _rows($elements);

            // revert original inline styles
            $elements.each(function() {
                var $that = $(this);
                $that.attr('style', $that.data('style-cache') || '');
            });
        }

        $.each(rows, function(key, row) {
            var $row = $(row),
                targetHeight = 0;

            if (!opts.target) {
                // skip apply to rows with only one item
                if (opts.byRow && $row.length <= 1) {
                    $row.css(opts.property, '');
                    return;
                }

                // iterate the row and find the max height
                $row.each(function(){
                    var $that = $(this),
                        style = $that.attr('style'),
                        display = $that.css('display');

                    // temporarily force a usable display value
                    if (display !== 'inline-block' && display !== 'flex' && display !== 'inline-flex') {
                        display = 'block';
                    }

                    // ensure we get the correct actual height (and not a previously set height value)
                    var css = { 'display': display };
                    css[opts.property] = '';
                    $that.css(css);

                    // find the max height (including padding, but not margin)
                    if ($that.outerHeight(false) > targetHeight) {
                        targetHeight = $that.outerHeight(false);
                    }

                    // revert styles
                    if (style) {
                        $that.attr('style', style);
                    } else {
                        $that.css('display', '');
                    }
                });
            } else {
                // if target set, use the height of the target element
                targetHeight = opts.target.outerHeight(false);
            }

            // iterate the row and apply the height to all elements
            $row.each(function(){
                var $that = $(this),
                    verticalPadding = 0;

                // don't apply to a target
                if (opts.target && $that.is(opts.target)) {
                    return;
                }

                // handle padding and border correctly (required when not using border-box)
                if ($that.css('box-sizing') !== 'border-box') {
                    verticalPadding += _parse($that.css('border-top-width')) + _parse($that.css('border-bottom-width'));
                    verticalPadding += _parse($that.css('padding-top')) + _parse($that.css('padding-bottom'));
                }

                // set the height (accounting for padding and border)
                $that.css(opts.property, (targetHeight - verticalPadding) + 'px');
            });
        });

        // revert hidden parents
        $hiddenParents.each(function() {
            var $that = $(this);
            $that.attr('style', $that.data('style-cache') || null);
        });

        // restore scroll position if enabled
        if (matchHeight._maintainScroll) {
            $(window).scrollTop((scrollTop / htmlHeight) * $('html').outerHeight(true));
        }

        return this;
    };

    /*
    *  matchHeight._applyDataApi
    *  applies matchHeight to all elements with a data-match-height attribute
    */

    matchHeight._applyDataApi = function() {
        var groups = {};

        // generate groups by their groupId set by elements using data-match-height
        $('[data-match-height], [data-mh]').each(function() {
            var $this = $(this),
                groupId = $this.attr('data-mh') || $this.attr('data-match-height');

            if (groupId in groups) {
                groups[groupId] = groups[groupId].add($this);
            } else {
                groups[groupId] = $this;
            }
        });

        // apply matchHeight to each group
        $.each(groups, function() {
            this.matchHeight(true);
        });
    };

    /*
    *  matchHeight._update
    *  updates matchHeight on all current groups with their correct options
    */

    var _update = function(event) {
        if (matchHeight._beforeUpdate) {
            matchHeight._beforeUpdate(event, matchHeight._groups);
        }

        $.each(matchHeight._groups, function() {
            matchHeight._apply(this.elements, this.options);
        });

        if (matchHeight._afterUpdate) {
            matchHeight._afterUpdate(event, matchHeight._groups);
        }
    };

    matchHeight._update = function(throttle, event) {
        // prevent update if fired from a resize event
        // where the viewport width hasn't actually changed
        // fixes an event looping bug in IE8
        if (event && event.type === 'resize') {
            var windowWidth = $(window).width();
            if (windowWidth === _previousResizeWidth) {
                return;
            }
            _previousResizeWidth = windowWidth;
        }

        // throttle updates
        if (!throttle) {
            _update(event);
        } else if (_updateTimeout === -1) {
            _updateTimeout = setTimeout(function() {
                _update(event);
                _updateTimeout = -1;
            }, matchHeight._throttle);
        }
    };

    /*
    *  bind events
    */

    // apply on DOM ready event
    $(matchHeight._applyDataApi);

    // use on or bind where supported
    var on = $.fn.on ? 'on' : 'bind';

    // update heights on load and resize events
    $(window)[on]('load', function(event) {
        matchHeight._update(false, event);
    });

    // throttled update heights on resize events
    $(window)[on]('resize orientationchange', function(event) {
        matchHeight._update(true, event);
    });

});

jQuery(document).ready(function(){
  //Lazy loading
  var myLazyLoad = new LazyLoad();


  jQuery('.match-height .col').matchHeight();

});


jQuery(document).ready(function(){

    //no drag on touch devices
    isTouch = (('ontouchstart' in window) || (navigator.msMaxTouchPoints > 0));
    if(isTouch){
        return;
    }

    const theme_sliders = document.querySelectorAll('.scroll');
    let isDown = false;
    let startX;
    let scrollLeft;

    theme_sliders.forEach(function(slider) {
        slider.addEventListener('mousedown', (e) => {
            isDown = true;
            slider.classList.add('active');
            startX = e.pageX - slider.offsetLeft;
            scrollLeft = slider.scrollLeft;
        });
        slider.addEventListener('mouseleave', () => {
            isDown = false;
            slider.classList.remove('active');
        });
        slider.addEventListener('mouseup', () => {
            isDown = false;
            slider.classList.remove('active');
        });
        slider.addEventListener('mousemove', (e) => {
            if(!isDown) return;
            e.preventDefault();
            const x = e.pageX - slider.offsetLeft;
            const walk = (x - startX) * 3; //scroll-fast
            slider.scrollLeft = scrollLeft - walk;
        });
    });




});
jQuery('[data-slide]').on('click', function (e) {

    direction = jQuery(this).data('slide');
    target = jQuery(this).data('target');
    e.preventDefault();


    elm = jQuery(target);
    if (elm.is(':animated')) {
        return;
    }

    slide_width = elm.width();

    if (direction == 'right') {
        slide_pos = elm.scrollLeft() + slide_width;
    } else if (direction == 'left') {
        {
            slide_pos = elm.scrollLeft() - slide_width;
        }

        if (slide_pos < 0) {
            slide_pos = 0;
        }
    }

    elm.animate({
        'scrollLeft': slide_pos
    }, 300);
});
jQuery(document).ready(function(){


    jQuery('[data-toggle="tooltip"]').tooltip();
    jQuery('[data-toggle="tooltip"]').on('click',function(event){
      event.preventDefault();
      console.log('asdcasdcasd');
      return false;
    });
});

var bdm_timeline_filter = {
  init:function(){
    /* Input listener */
    jQuery( '.bd-timeline-filter .bd-tf-list-item input[type="checkbox"]').on('change',bdm_timeline_filter.filter);
  },
  filter:function(){
    checked_inputs = jQuery('.bd-timeline-filter .bd-tf-list-item input[type="checkbox"]:checked');
    show_types = checked_inputs.serializeArray();
    timeline_items = jQuery('.bd-timeline-item');
    if(show_types.length>0){
      timeline_items.removeClass('active').addClass('inactive');
      jQuery.each(show_types, function( i, field ) {
        jQuery('.bd-timeline-item[data-timelinetype~="'+field.value+'"]').not('.active').removeClass('inactive').addClass('active');
      });
    }else{
      timeline_items = timeline_items.not('.active').removeClass('inactive').addClass('active');
    }
    
    //Show periode blocks
    bdm_timeline_period.show();
  }
};

var bdm_timeline_period = {
  show: function(){
    periode_indicators = jQuery('.bd-timeline-periode');
    periode_indicators.each(function(){
      period_container = jQuery(this).next('.bd-timeline-periode-container');
      items = period_container.find('.bd-timeline-item.active');
      if(items.length<1){
        jQuery(this).removeClass('active').addClass('inactive');
      }else{
        jQuery(this).removeClass('inactive').addClass('active');
      }
    });
  }
};

jQuery(document).ready(function(){
  if(jQuery('.bd-timeline-filter').length>0){
    bdm_timeline_filter.init();
  }
  
  
    jQuery('.bd-timeline-filter-label').on('click',function(){
      jQuery(this).closest('.bd-timeline-filter').toggleClass('active inactive');
    });
});
var bdm_timeline_gallery = {
    view_port_ratio: 0.56, // 458 x 260
    /*
    * Init
    */
    init:function(){
      /* Input listener */
      jQuery( '.bd-tic-gallery').each(bdm_timeline_gallery.gallery_init);

      /* Resize window */
      jQuery(window).on('resize',function(){
        jQuery( '.bd-tic-gallery').each(function(){
          bdm_timeline_gallery.set_viewport(jQuery(this));
          //reset offset
          bdm_timeline_gallery.reset_index(jQuery(this));
        });
      });
    },
    /*
    * Init gallery
    */
    gallery_init: function(){
        bdm_timeline_gallery.set_viewport(jQuery(this));
        bdm_timeline_gallery.reset_index(jQuery(this));
        //Init navigation
        jQuery(this).find('.bd-tic-gallery-nav-item').on('click',bdm_timeline_gallery.to_index);
    },
    /*
    * Navigation
    */
    to_index: function(){
      if(jQuery(this).hasClass('active')){
        return false;
      }

      //Set offset
      current_index = jQuery(this).index();
      gallery_container = jQuery(this).closest('.bd-tic-gallery').find('.bd-tic-gallery-container');
      slide_width = gallery_container.find('.bd-tic-gallery-slide').width();
      container_offset = slide_width*current_index;
      gallery_container.css('margin-left','-'+container_offset+'px');

      //Change indicator
      jQuery(this).parent().find('.active').toggleClass('active inactive');
      jQuery(this).toggleClass('active inactive');
    },
    /* Reset offset for active slide after resize */
    reset_index: function(container_item){
      current_index = container_item.find('.bd-tic-gallery-nav .bd-tic-gallery-nav-item.active').index();
      gallery_container = container_item.find('.bd-tic-gallery-container');
      slide_width = gallery_container.find('.bd-tic-gallery-slide').width();
      container_offset = slide_width*current_index;
      gallery_container.css('margin-left','-'+container_offset+'px');
    },
    /*
    * Get gallery view_port
    */
    set_viewport:function(container_item){
      container_item.find('.bd-tic-gallery-container').each(function(){
        parent_width = jQuery(this).closest('.bd-tic-gallery').width();
        container_height = parent_width*bdm_timeline_gallery.view_port_ratio;
        //set container height
        jQuery(this).height(container_height);
        //Set slide width
        jQuery(this).find('.bd-tic-gallery-slide').width(parent_width);
      });
    }
  };

//load gallery
jQuery(document).ready(function(){
  if(jQuery('.bd-tic-gallery').length>0){
    bdm_timeline_gallery.init();
  }
});

jQuery(document).ready(function(){

  if(jQuery('.bd-timeline-main-container').length<1){
    return;
  }
  jQuery('.bdm-timline-nav-toggle').on('click',function(){
    jQuery(this).closest('.bdm-timline-nav').toggleClass('active inactive');
  });

  //Init current periode
  bdm_timeline_navigation.init();
  //Init current periode
  bdm_timeline_current_periode.init();
});




var bdm_timeline_current_periode = {
  checkperiode_timeout: null,
  init: function(){
    //first loading
    bdm_timeline_current_periode.check_periode();
    //Window events
    jQuery(window).scroll(bdm_timeline_current_periode.check_periode);
    jQuery(window).resize(bdm_timeline_current_periode.check_periode);

    setTimeout(function(){
      bdm_timeline_current_periode.check_periode();
    },1000);
  },

  check_periode: function(){
    clearTimeout(bdm_timeline_current_periode.checkperiode_timeout);
    this.checkperiode_timeout = setTimeout(bdm_timeline_current_periode.set_current_periode, 500);
  },
  set_current_periode: function(){
    var scrollTop = jQuery(window).scrollTop();
  	var windowHeight = jQuery(window).height();
  	jQuery(".bd-timeline-periode").each( function() {
  		var offset = jQuery(this).offset();
  		if (scrollTop <= offset.top && (jQuery(this).height() + offset.top) < (scrollTop + windowHeight)) {
        if(!jQuery(this).hasClass('current-periode')){
          jQuery('.bd-timeline-periode.current-periode').removeClass("current-periode");
          jQuery(this).addClass("current-periode");
          jQuery('#bdm-timeline').trigger('current-periode-changed');
        }
        return false;
  		}
  	});
  },
  get_current_periode: function(){
    periode = jQuery('.bd-timeline-periode.current-periode').data('tl-position');
    return periode;
  }
};

/* Navigation */
var bdm_timeline_navigation = {
    init: function(){
      jQuery('.bdm-tn-item').on('click',bdm_timeline_navigation.go_to_position);

      jQuery('#bdm-timeline').on('current-periode-changed',function(){
        periode = bdm_timeline_current_periode.get_current_periode();
        jQuery('.bdm-tn-item.active').removeClass('active');
        jQuery('.bdm-tn-item[data-tl-selection="'+periode+'"]').addClass('active');
      });

    },
    go_to_position: function(){
      position_element = jQuery(this).data('tl-selection');
        time_position_item = jQuery('[data-tl-position="'+position_element+'"]');
        header_offset = 0;
        jQuery('html, body').animate({
          scrollTop: (time_position_item.offset().top-header_offset)
      }, 500);
    }
};
