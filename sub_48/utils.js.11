/*
 *   Copyright (c) 2022 Esri
 *   All rights reserved.

 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at

 *   http://www.apache.org/licenses/LICENSE-2.0

 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
define(["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateLayerListVisibility = exports.updateLayerVisibility = exports.isMacLike = exports.isMobile = exports._findNode = exports.setPanelSize = exports._isTouchDevice = void 0;
    function _isTouchDevice() {
        return (('ontouchstart' in window) ||
            (navigator.maxTouchPoints > 0));
    }
    exports._isTouchDevice = _isTouchDevice;
    function setPanelSize(panelSize) {
        var grid;
        if (panelSize === "s") {
            grid = "column-6";
        }
        else if (panelSize === "m") {
            grid = "column-10";
        }
        else {
            grid = "column-12";
        }
        return grid;
    }
    exports.setPanelSize = setPanelSize;
    function _findNode(className) {
        var mainNodes = document.getElementsByClassName(className);
        var node = null;
        for (var j = 0; j < mainNodes.length; j++) {
            node = mainNodes[j];
        }
        return node ? node : null;
    }
    exports._findNode = _findNode;
    function isMobile() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }
    exports.isMobile = isMobile;
    function isMacLike() {
        return /(Mac)/i.test(navigator.platform);
    }
    exports.isMacLike = isMacLike;
    function updateLayerVisibility(layers) {
        layers === null || layers === void 0 ? void 0 : layers.forEach(function (origLayer) {
            var _a, _b;
            if ((origLayer === null || origLayer === void 0 ? void 0 : origLayer.hasOwnProperty("internal")) && (origLayer === null || origLayer === void 0 ? void 0 : origLayer.internal)) {
                origLayer.listMode = "hide";
            }
            else {
                origLayer.listMode = "show";
            }
            if (origLayer.type === "group" && ((_a = origLayer === null || origLayer === void 0 ? void 0 : origLayer.layers) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                updateLayerVisibility(origLayer.layers);
            }
            if ((origLayer.type === "map-image" || origLayer.type === "tile") && ((_b = origLayer === null || origLayer === void 0 ? void 0 : origLayer.allSublayers) === null || _b === void 0 ? void 0 : _b.length) > 0) {
                updateLayerVisibility(origLayer.allSublayers);
            }
        });
    }
    exports.updateLayerVisibility = updateLayerVisibility;
    function updateLayerListVisibility(layers, selectedLayerIds, config) {
        layers === null || layers === void 0 ? void 0 : layers.forEach(function (layer) {
            var _a, _b, _c;
            if ((layer === null || layer === void 0 ? void 0 : layer.type) === "group") {
                // Show group sub layers and if none are visible hide the group too
                var showGroup = (_a = layer === null || layer === void 0 ? void 0 : layer.layers) === null || _a === void 0 ? void 0 : _a.some(function (g) {
                    var _a;
                    if ((g === null || g === void 0 ? void 0 : g.type) === "group") {
                        // is there a sub group that contains content 
                        return (_a = g === null || g === void 0 ? void 0 : g.layers) === null || _a === void 0 ? void 0 : _a.some(function (gsl) {
                            return ((selectedLayerIds === null || selectedLayerIds === void 0 ? void 0 : selectedLayerIds.indexOf(gsl === null || gsl === void 0 ? void 0 : gsl.id)) !== -1) ? true : false;
                        });
                    }
                    return ((selectedLayerIds === null || selectedLayerIds === void 0 ? void 0 : selectedLayerIds.indexOf(g === null || g === void 0 ? void 0 : g.id)) !== -1) ? true : false;
                });
                // if a group contains a group layer that 
                layer.listMode = showGroup ? "show" : "hide";
                updateLayerListVisibility(layer === null || layer === void 0 ? void 0 : layer.layers, selectedLayerIds, config);
            }
            else if ((layer === null || layer === void 0 ? void 0 : layer.type) === "map-image" || (layer === null || layer === void 0 ? void 0 : layer.type) === "tile") {
                layer.listMode = "hide";
                (_b = layer === null || layer === void 0 ? void 0 : layer.allSublayers) === null || _b === void 0 ? void 0 : _b.forEach(function (g) {
                    g.listMode = "hide";
                });
                var layerId_1 = layer.id;
                if ((selectedLayerIds === null || selectedLayerIds === void 0 ? void 0 : selectedLayerIds.indexOf(layerId_1)) === -1) {
                    // layer isn't selected 
                    return;
                }
                (_c = layer === null || layer === void 0 ? void 0 : layer.allSublayers) === null || _c === void 0 ? void 0 : _c.forEach(function (l) {
                    var _a, _b;
                    (_b = (_a = config === null || config === void 0 ? void 0 : config.selectedLayers) === null || _a === void 0 ? void 0 : _a.layers) === null || _b === void 0 ? void 0 : _b.forEach(function (selectedLayer) {
                        var _a;
                        if ((selectedLayer === null || selectedLayer === void 0 ? void 0 : selectedLayer.id) === layerId_1 && (selectedLayer === null || selectedLayer === void 0 ? void 0 : selectedLayer.sublayerId) === l.id) {
                            if (((_a = l === null || l === void 0 ? void 0 : l.parent) === null || _a === void 0 ? void 0 : _a.listMode) === "hide") {
                                // change hide to show, all the way up to the root layer
                                var parentLayer = l.parent;
                                while (parentLayer != null) {
                                    parentLayer.listMode = "show";
                                    parentLayer = parentLayer === null || parentLayer === void 0 ? void 0 : parentLayer.parent;
                                }
                            }
                            l.listMode = "show";
                        }
                    });
                });
            }
            else {
                layer.listMode = ((selectedLayerIds === null || selectedLayerIds === void 0 ? void 0 : selectedLayerIds.indexOf(layer === null || layer === void 0 ? void 0 : layer.id)) !== -1) ? "show" : "hide";
            }
        });
    }
    exports.updateLayerListVisibility = updateLayerListVisibility;
});
