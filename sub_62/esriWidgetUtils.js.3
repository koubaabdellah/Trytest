/*
 *   Copyright (c) 2022 Esri
 *   All rights reserved.

 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at

 *   http://www.apache.org/licenses/LICENSE-2.0

 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define(["require", "exports", "esri/core/watchUtils", "esri/core/promiseUtils", "esri/core/Handles", "esri/widgets/Expand", "TemplatesCommonLib/functionality/basemapToggle", "./utils"], function (require, exports, watchUtils_1, promiseUtils_1, Handles_1, Expand_1, basemapToggle_1, utils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addZoom = exports.addScreenshot = exports.addScaleBar = exports.addLegend = exports.addHome = exports.addBookmarks = exports.addBasemap = exports.addMapComponents = void 0;
    Handles_1 = __importDefault(Handles_1);
    Expand_1 = __importDefault(Expand_1);
    function addMapComponents(props) {
        return __awaiter(this, void 0, void 0, function () {
            var config, _handles;
            return __generator(this, function (_a) {
                config = props.config;
                _handles = new Handles_1.default();
                _handles.add([(0, watchUtils_1.init)(config, ["home", "homePosition"], function (newValue, oldValue, propertyName) {
                        props.propertyName = propertyName;
                        addHome(props);
                    }),
                    (0, watchUtils_1.init)(config, "bookmarks, bookmarksPosition", function (newValue, oldValue, propertyName) {
                        props.propertyName = propertyName;
                        addBookmarks(props);
                    }),
                    (0, watchUtils_1.init)(config, ["mapZoom", "mapZoomPosition"], function (newValue, oldValue, propertyName) {
                        props.propertyName = propertyName;
                        addZoom(props);
                    }),
                    (0, watchUtils_1.init)(config, ["sketchGeometry", "enableSketchTools", "sketchToolsPosition"], function (newValue, oldValue, propertyName) {
                        props.propertyName = propertyName;
                        //(props);
                    }),
                    (0, watchUtils_1.init)(config, ["screenshot", "screenshotPosition"], function (newValue, oldValue, propertyName) {
                        props.propertyName = propertyName;
                        addScreenshot(props);
                    }),
                    (0, watchUtils_1.init)(config, ["legend", "legendConfig", "legendPosition", "legendOpenAtStart"], function (newValue, oldValue, propertyName) {
                        props.propertyName = propertyName;
                        addLegend(props);
                    }),
                    (0, watchUtils_1.init)(config, ["scalebar", "scalebarPosition"], function (newValue, oldValue, propertyName) {
                        props.propertyName = propertyName;
                        addScaleBar(props);
                    }),
                    (0, watchUtils_1.init)(config, ["nextBasemap", "basemapTogglePosition", "basemapSelector", "basemapToggle"], function (newValue, oldValue, propertyName) {
                        props.propertyName = propertyName;
                        addBasemap(props);
                    })], "configuration");
                if (!config.withinConfigurationExperience) {
                    _handles.remove("configuration");
                }
                return [2 /*return*/];
            });
        });
    }
    exports.addMapComponents = addMapComponents;
    function addBasemap(props) {
        return __awaiter(this, void 0, void 0, function () {
            var view, config, propertyName, basemapTogglePosition, basemapToggle, node, _a, originalBasemap, nextBasemap, BasemapToggle, bmToggle;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        view = props.view, config = props.config, propertyName = props.propertyName;
                        basemapTogglePosition = config.basemapTogglePosition, basemapToggle = config.basemapToggle;
                        node = view.ui.find("basemapWidget");
                        return [4 /*yield*/, (0, basemapToggle_1.getBasemaps)(props)];
                    case 1:
                        _a = _b.sent(), originalBasemap = _a.originalBasemap, nextBasemap = _a.nextBasemap;
                        // If basemapToggle isn't enabled remove the widget if it exists and exit 
                        if (!basemapToggle) {
                            if (node) {
                                view.ui.remove(node);
                                node.destroy();
                            }
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, new Promise(function (resolve_1, reject_1) { require(["esri/widgets/BasemapToggle"], resolve_1, reject_1); }).then(__importStar)];
                    case 2:
                        BasemapToggle = _b.sent();
                        if (!BasemapToggle)
                            return [2 /*return*/];
                        // Move the basemap toggle widget if it exists 
                        if (propertyName === "basemapTogglePosition" && node) {
                            view.ui.move(node, basemapTogglePosition);
                        }
                        // Add the basemap toggle widget if its enabled or if a different basemap was 
                        // specified
                        if (propertyName === "basemapToggle" && !node) {
                            bmToggle = new BasemapToggle.default({
                                view: view,
                                nextBasemap: nextBasemap,
                                id: "basemapWidget"
                            });
                            (0, basemapToggle_1.resetBasemapsInToggle)(bmToggle, originalBasemap, nextBasemap);
                            view.ui.add(bmToggle, basemapTogglePosition);
                        }
                        else if (node && (propertyName === "nextBasemap" || propertyName === "basemapSelector")) {
                            if (propertyName === "nextBasemap" || propertyName === "basemapSelector") {
                                (0, basemapToggle_1.resetBasemapsInToggle)(node, originalBasemap, nextBasemap);
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
    exports.addBasemap = addBasemap;
    function addBookmarks(props) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var view, config, propertyName, bookmarks, bookmarksPosition, node, map, mapContainsBookmarks, Bookmarks, group, content_1, bookmarksExpand_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        view = props.view, config = props.config, propertyName = props.propertyName;
                        bookmarks = config.bookmarks, bookmarksPosition = config.bookmarksPosition;
                        node = view.ui.find("bookmarksExpand");
                        map = view.map;
                        mapContainsBookmarks = ((_a = map === null || map === void 0 ? void 0 : map.bookmarks) === null || _a === void 0 ? void 0 : _a.length) > 0 ? true : false;
                        if (!bookmarks || !mapContainsBookmarks) {
                            if (node)
                                view.ui.remove(node);
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, new Promise(function (resolve_2, reject_2) { require(["esri/widgets/Bookmarks"], resolve_2, reject_2); }).then(__importStar)];
                    case 1:
                        Bookmarks = _b.sent();
                        group = _getPosition(bookmarksPosition);
                        if (propertyName === "bookmarksPosition" && node) {
                            view.ui.move(node, bookmarksPosition);
                            node.group = group;
                        }
                        else if (propertyName === "bookmarks") {
                            content_1 = new Bookmarks.default({
                                view: view,
                                viewModel: {
                                    view: view,
                                    abilities: { time: false }
                                }
                            });
                            bookmarksExpand_1 = new Expand_1.default({
                                id: "bookmarksExpand",
                                content: content_1,
                                group: group,
                                mode: "floating",
                                view: view
                            });
                            (0, utils_1.handleExpandUpdated)(bookmarksExpand_1);
                            content_1.watch("label", function () {
                                var tip = "".concat(config.appBundle.toggle, " ").concat(content_1.label);
                                if (bookmarksExpand_1) {
                                    bookmarksExpand_1.collapseTooltip = tip;
                                    bookmarksExpand_1.expandTooltip = tip;
                                }
                            });
                            view.ui.add(bookmarksExpand_1, bookmarksPosition);
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
    exports.addBookmarks = addBookmarks;
    function addHome(props) {
        return __awaiter(this, void 0, void 0, function () {
            var view, config, propertyName, home, homePosition, Home, node;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        view = props.view, config = props.config, propertyName = props.propertyName;
                        home = config.home, homePosition = config.homePosition;
                        return [4 /*yield*/, new Promise(function (resolve_3, reject_3) { require(['esri/widgets/Home'], resolve_3, reject_3); }).then(__importStar)];
                    case 1:
                        Home = _a.sent();
                        node = (0, utils_1.findNode)("esri-home");
                        if (!home) {
                            if (node)
                                view.ui.remove(node);
                            return [2 /*return*/];
                        }
                        if (node && !home)
                            view.ui.remove(node);
                        if (propertyName === "homePosition" && node) {
                            view.ui.move(node, homePosition);
                        }
                        else if (propertyName === "home") {
                            view.ui.add(new Home.default({ view: view }), homePosition);
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
    exports.addHome = addHome;
    function addLegend(props) {
        return __awaiter(this, void 0, void 0, function () {
            var view, config, propertyName, legend, legendPosition, legendOpenAtStart, legendConfig, modules, _a, Legend, Expand, node, content_2, legendExpand_1, l;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        view = props.view, config = props.config, propertyName = props.propertyName;
                        legend = config.legend, legendPosition = config.legendPosition, legendOpenAtStart = config.legendOpenAtStart, legendConfig = config.legendConfig;
                        return [4 /*yield*/, (0, promiseUtils_1.eachAlways)([new Promise(function (resolve_4, reject_4) { require(["esri/widgets/Legend"], resolve_4, reject_4); }).then(__importStar), new Promise(function (resolve_5, reject_5) { require(["esri/widgets/Expand"], resolve_5, reject_5); }).then(__importStar)])];
                    case 1:
                        modules = _b.sent();
                        _a = modules.map(function (module) { return module.value; }), Legend = _a[0], Expand = _a[1];
                        node = view.ui.find("legendExpand");
                        if (!legend) {
                            if (node)
                                view.ui.remove(node);
                            return [2 /*return*/];
                        }
                        // move the node if it exists 
                        if (propertyName === "legendPosition" && node) {
                            view.ui.move(node, legendPosition);
                        }
                        else if (propertyName === "legend") {
                            content_2 = new Legend.default({
                                style: legendConfig.style,
                                view: view
                            });
                            legendExpand_1 = new Expand.default({
                                id: "legendExpand",
                                content: content_2,
                                mode: "floating",
                                group: legendPosition,
                                view: view
                            });
                            (0, utils_1.handleExpandUpdated)(legendExpand_1);
                            (0, watchUtils_1.watch)(content_2, "label", function () {
                                var label = "".concat(config.appBundle.toggle, " ").concat(content_2.label);
                                legendExpand_1.collapseTooltip = label;
                                legendExpand_1.expandTooltip = label;
                            });
                            view.ui.add(legendExpand_1, legendPosition);
                        }
                        else if (propertyName === "legendOpenAtStart" && node) {
                            node.expanded = legendOpenAtStart;
                        }
                        else if (propertyName === "legendConfig" && node) {
                            l = node.content;
                            if (legendConfig === null || legendConfig === void 0 ? void 0 : legendConfig.style) {
                                l.style = legendConfig.style;
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
    exports.addLegend = addLegend;
    function addScaleBar(props) {
        return __awaiter(this, void 0, void 0, function () {
            var view, portal, config, propertyName, scalebar, scalebarPosition, ScaleBar, node;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        view = props.view, portal = props.portal, config = props.config, propertyName = props.propertyName;
                        scalebar = config.scalebar, scalebarPosition = config.scalebarPosition;
                        return [4 /*yield*/, new Promise(function (resolve_6, reject_6) { require(["esri/widgets/ScaleBar"], resolve_6, reject_6); }).then(__importStar)];
                    case 1:
                        ScaleBar = _a.sent();
                        node = (0, utils_1.findNode)("esri-scale-bar");
                        if (!scalebar) {
                            if (node)
                                view.ui.remove(node);
                            return [2 /*return*/];
                        }
                        // move the node if it exists 
                        if (propertyName === "scalebarPosition" && node) {
                            view.ui.move(node, scalebarPosition);
                        }
                        else if (propertyName === "scalebar") {
                            view.ui.add(new ScaleBar.default({
                                view: view,
                                unit: (portal === null || portal === void 0 ? void 0 : portal.units) === "metric" ? portal === null || portal === void 0 ? void 0 : portal.units : "non-metric"
                            }), scalebarPosition);
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
    exports.addScaleBar = addScaleBar;
    function addScreenshot(props) {
        return __awaiter(this, void 0, void 0, function () {
            var view, config, propertyName, screenshot, screenshotPosition, legend, Screenshot, node, content_3, screenshotExpand_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        view = props.view, config = props.config, propertyName = props.propertyName;
                        screenshot = config.screenshot, screenshotPosition = config.screenshotPosition, legend = config.legend;
                        return [4 /*yield*/, new Promise(function (resolve_7, reject_7) { require(["Components/Screenshot/Screenshot"], resolve_7, reject_7); }).then(__importStar)];
                    case 1:
                        Screenshot = _a.sent();
                        node = view.ui.find("screenshotExpand");
                        if (!screenshot) {
                            if (node)
                                view.ui.remove(node);
                            return [2 /*return*/];
                        }
                        // move the node if it exists 
                        if (propertyName === "screenshotPosition" && node) {
                            view.ui.move(node, screenshotPosition);
                        }
                        else if (propertyName === "screenshot") {
                            content_3 = new Screenshot.default({
                                view: view,
                                enableLegendOption: legend ? true : false,
                                enablePopupOption: false,
                                includeLayoutOption: true,
                                disableCustom: true,
                                custom: {
                                    label: config.appBundle.tools.screenshotResults,
                                    element: document.getElementById("offscreenResults")
                                },
                                includePopupInScreenshot: false,
                                includeCustomInScreenshot: false,
                                includeLegendInScreenshot: false
                            });
                            screenshotExpand_1 = new Expand_1.default({
                                id: "screenshotExpand",
                                content: content_3,
                                mode: "floating",
                                view: view
                            });
                            (0, utils_1.handleExpandUpdated)(screenshotExpand_1);
                            (0, watchUtils_1.init)(content_3, "label", function () {
                                screenshotExpand_1.collapseTooltip = "".concat(config.appBundle.toggle, " ").concat(content_3.label);
                                screenshotExpand_1.expandTooltip = "".concat(config.appBundle.toggle, " ").concat(content_3.label);
                            });
                            view.ui.add(screenshotExpand_1, screenshotPosition);
                            (0, watchUtils_1.whenTrueOnce)(screenshotExpand_1, "expanded", function () {
                                var sw = screenshotExpand_1.content;
                                if (!sw)
                                    return;
                                (0, watchUtils_1.whenTrue)(sw, "screenshotModeIsActive", function () {
                                    var _a, _b;
                                    // Copy the results to the offscreen widget
                                    if (sw.includeCustomInScreenshot) {
                                        var container = (_a = sw === null || sw === void 0 ? void 0 : sw.custom) === null || _a === void 0 ? void 0 : _a.element;
                                        if (container) {
                                            var resultContainer = document.getElementById("feature-container");
                                            var features = resultContainer.getElementsByClassName("feature-group");
                                            container.innerHTML = null;
                                            for (var i = 0; i < features.length; i++) {
                                                var feature = (_b = features[i]) === null || _b === void 0 ? void 0 : _b.cloneNode(true);
                                                container.append(feature);
                                            }
                                        }
                                    }
                                });
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
    exports.addScreenshot = addScreenshot;
    function addZoom(props) {
        return __awaiter(this, void 0, void 0, function () {
            var view, config, propertyName, mapZoom, mapZoomPosition, Zoom, node;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        view = props.view, config = props.config, propertyName = props.propertyName;
                        mapZoom = config.mapZoom, mapZoomPosition = config.mapZoomPosition;
                        return [4 /*yield*/, new Promise(function (resolve_8, reject_8) { require(["esri/widgets/Zoom"], resolve_8, reject_8); }).then(__importStar)];
                    case 1:
                        Zoom = _a.sent();
                        node = (0, utils_1.findNode)("esri-zoom");
                        if (!mapZoom) {
                            if (node)
                                view.ui.remove(node);
                            return [2 /*return*/];
                        }
                        if (node && !mapZoom)
                            view.ui.remove(node);
                        if (propertyName === "mapZoomPosition" && node) {
                            view.ui.move(node, mapZoomPosition);
                        }
                        else if (propertyName === "mapZoom" && !node) {
                            view.ui.add(new Zoom.default({ view: view }), mapZoomPosition);
                        }
                        return [2 /*return*/];
                }
            });
        });
    }
    exports.addZoom = addZoom;
    function _getBasemap(id) {
        return __awaiter(this, void 0, void 0, function () {
            var Basemap, basemap;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new Promise(function (resolve_9, reject_9) { require(["esri/Basemap"], resolve_9, reject_9); }).then(__importStar)];
                    case 1:
                        Basemap = _a.sent();
                        if (!Basemap) {
                            return [2 /*return*/];
                        }
                        basemap = Basemap.default.fromId(id);
                        if (!!basemap) return [3 /*break*/, 3];
                        return [4 /*yield*/, new Basemap.default({
                                portalItem: {
                                    id: id
                                }
                            }).loadAll()];
                    case 2:
                        basemap = _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, basemap];
                }
            });
        });
    }
    function _getPosition(position) {
        // object or string 
        var groupName = null;
        if (typeof position === "string") {
            groupName = position;
        }
        else if (position === null || position === void 0 ? void 0 : position.position) {
            groupName = position.position;
        }
        return groupName;
    }
});
