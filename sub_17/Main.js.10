/// <amd-dependency path="esri/core/tsSupport/declareExtendsHelper" name="__extends" />
/// <amd-dependency path="esri/core/tsSupport/decorateHelper" name="__decorate" />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define(["require", "exports", "esri/core/tsSupport/declareExtendsHelper", "esri/core/tsSupport/decorateHelper", "esri/core/accessorSupport/decorators", "esri/widgets/support/widget", "esri/widgets/Widget", "application/utilities/appUtils", "application/utilities/telemetryUtils", "esri/core/promiseUtils", "./Viewer", "application/widgets/Header", "application/widgets/Drawer"], function (require, exports, __extends, __decorate, decorators_1, widget_1, Widget, appUtils, telemetryUtils, promiseUtils, Viewer_1, Header_1, Drawer_1) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var Main = /** @class */ (function (_super) {
        __extends(Main, _super);
        function Main(params) {
            var _this = _super.call(this) || this;
            _this.state = {
                boilerplate: params.boilerplate,
                boilerplateResult: null,
                i18n: params.i18n,
                item: null,
                loadMessage: "init",
                loadStatus: "loading",
                drawerComponent: { render: function () { return null; } },
                viewComponent: { render: function () { return null; } },
                headComponent: { render: function () { return null; } }
            };
            _this.handleBoilerplateError = _this.handleBoilerplateError.bind(_this);
            _this.handleBoilerplateLoad = _this.handleBoilerplateLoad.bind(_this);
            _this.handleAuthentication = _this.handleAuthentication.bind(_this);
            _this.boilerplate = params.boilerplate;
            _this.boilerplate.load().then(_this.handleBoilerplateLoad, _this.handleBoilerplateError);
            return _this;
        }
        Main.prototype.render = function () {
            if (this.state.loadStatus === "loaded") {
                return (widget_1.tsx("div", null,
                    this.state.drawerComponent.render(),
                    widget_1.tsx("div", { key: "main" },
                        this.state.headComponent.render(),
                        this.state.viewComponent.render())));
            }
            else if (this.state.loadStatus === "failed") {
                return (widget_1.tsx("div", null,
                    widget_1.tsx("h3", { class: "center-style" }, this.state.i18n.appLoading.failed)));
            }
            return (widget_1.tsx("div", null,
                widget_1.tsx("div", { class: "loader is-active padding-leader-3 padding-trailer-3 center-style", key: "loader" },
                    widget_1.tsx("div", { class: "loader-bars" }),
                    widget_1.tsx("div", { bind: this, class: "loader-text" }, this.state.i18n.appLoading[this.state.loadMessage]))));
        };
        Main.prototype.handleBoilerplateLoad = function (boilerplateResult) {
            var _this = this;
            telemetryUtils.logPageView(boilerplateResult.settings);
            this.updateDocProperties(boilerplateResult);
            var itemId = boilerplateResult.config.id || boilerplateResult.config.webmap || boilerplateResult.config.webscene || null;
            this.state.boilerplate.loadItem(itemId).then(function (result) {
                _this.evaluateContents(result).always(function (updatedResult) {
                    _this.state = __assign({}, _this.state, { item: updatedResult, boilerplateResult: boilerplateResult, drawerComponent: Drawer_1.default({
                            config: boilerplateResult.config,
                            portal: boilerplateResult.portal,
                            mapItem: updatedResult,
                            i18n: _this.state.i18n,
                            active: false,
                            onCloseDrawer: appUtils.handleCloseDrawer,
                            onRedirect: appUtils.handleRedirectSite
                        }), headComponent: Header_1.default({
                            config: boilerplateResult.config,
                            i18n: _this.state.i18n,
                            mapItem: updatedResult,
                            projector: _this,
                            portal: boilerplateResult.portal,
                            onAuthenticate: _this.handleAuthentication,
                            onOpenDrawer: appUtils.handleOpenDrawer
                        }), viewComponent: Viewer_1.default({
                            settings: boilerplateResult.settings,
                            config: boilerplateResult.config,
                            item: updatedResult,
                            i18n: _this.state.i18n,
                            projector: _this
                        }), loadStatus: "loaded" });
                });
            }).otherwise(this.handleBoilerplateError);
        };
        Main.prototype.evaluateContents = function (result) {
            var _this = this;
            if (result.type === "Web Map" || result.type === "webmap") {
                return result.fetchData().always(function (data) {
                    if (data && !_this.checkWebMapVersion(data)) {
                        result.type = "3xwebmap";
                    }
                    return result;
                });
            }
            else {
                return promiseUtils.resolve(result);
            }
        };
        Main.prototype.checkWebMapVersion = function (data) {
            var supports4x = true;
            var telemetryInfo = {
                eventType: "click",
                category: "map-4x-support",
                label: "yes",
                details: ""
            };
            var version = data.version ? (parseInt(data.version)) : null;
            // If version is less than 2
            if (version && version < 2) {
                supports4x = false;
                telemetryInfo.details = "Unsupported version";
                telemetryInfo.label = "no";
            }
            // if version > 2 and no bing basemap check layers
            // to see if they are supported
            if (data.operationalLayers && supports4x) {
                data.operationalLayers.some(function (layer) {
                    var definition = layer.layerDefinition;
                    // Non Map Notes multi layer feature collection layers (e.g. gpx)
                    if (layer.featureCollection || (layer.type && layer.type === "Feature Collection")) {
                        if (layer.featureCollection.layers && layer.featureCollection.layers.length > 0) {
                            layer.featureCollection.layers.some(function (l) {
                                if (l.layerDefinition.hasOwnProperty("typeIdField") && l.layerDefinition.typeIdField.length === 0) {
                                    supports4x = false;
                                    return true;
                                }
                            });
                        }
                    }
                    // Check for layer type property
                    if (!layer.hasOwnProperty("layerType")) {
                        supports4x = false;
                        telemetryInfo.details = "No layerType";
                        telemetryInfo.label = "no";
                        return true;
                    }
                    // check for clustering
                    if (definition && definition.featureReduction && definition.featureReduction.type === "cluster") {
                        telemetryInfo.details = "Cluster";
                        telemetryInfo.label = "no";
                        supports4x = false;
                        return true;
                    }
                    // WFS
                    if (layer.layerType && layer.layerType === "WFS") {
                        telemetryInfo.details = "WFS";
                        telemetryInfo.label = "no";
                        supports4x = false;
                        return true;
                    }
                });
            }
            if (!supports4x) {
                telemetryUtils.logEvent(this.state.boilerplate.settings, telemetryInfo);
            }
            else {
                telemetryUtils.logEvent(this.state.boilerplate.settings, telemetryInfo);
            }
            return supports4x;
        };
        Main.prototype.updateDocProperties = function (boilerplateResult) {
            document.title = (boilerplateResult.portal && boilerplateResult.portal.name) ? boilerplateResult.portal.name : "ArcGIS Online";
            document.documentElement.lang = boilerplateResult.locale;
            document.body.setAttribute("style", "background-color: " + boilerplateResult.config.bgColor);
        };
        Main.prototype.handleBoilerplateError = function (err) {
            this.state = __assign({}, this.state, { loadStatus: "failed" });
        };
        Main.prototype.handleAuthentication = function (e) {
            var _this = this;
            this.state.boilerplate.authenticateUser(this.state.boilerplateResult.portal).then(function (boilerplateResult) {
                _this.updateDocProperties(boilerplateResult);
                _this.state = __assign({}, _this.state, { drawerComponent: Drawer_1.default({
                        portal: boilerplateResult.portal,
                        config: boilerplateResult.config,
                        mapItem: _this.state.item,
                        i18n: _this.state.i18n,
                        active: false,
                        onRedirect: appUtils.handleRedirectSite,
                        onCloseDrawer: appUtils.handleCloseDrawer
                    }), headComponent: Header_1.default({
                        config: boilerplateResult.config,
                        portal: boilerplateResult.portal,
                        i18n: _this.state.i18n,
                        projector: _this,
                        mapItem: _this.state.item,
                        onAuthenticate: _this.handleAuthentication,
                        onOpenDrawer: appUtils.handleOpenDrawer
                    }), loadStatus: "loaded" });
            });
        };
        __decorate([
            decorators_1.property(),
            widget_1.renderable()
        ], Main.prototype, "state", void 0);
        Main = __decorate([
            decorators_1.subclass("esri.widgets.Main")
        ], Main);
        return Main;
    }(decorators_1.declared(Widget)));
    exports.default = Main;
});
//# sourceMappingURL=Main.js.map